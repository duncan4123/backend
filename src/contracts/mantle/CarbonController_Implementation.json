{
  "address": "0x4cEaC6b778dadB3CE1A1e37284cbF4B791C72f51",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVoucher",
          "name": "initVoucher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeadlineExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GreaterThanMaxInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IdenticalAddresses",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientCapacity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientNativeTokenReceived",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndices",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTradeActionAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTradeActionStrategyId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LowerThanMinReturn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeAmountMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OrderDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OutDated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownDelegator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnnecessaryNativeTokenReceived",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint128",
          "name": "pairId",
          "type": "uint128"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevFeePPM",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newFeePPM",
          "type": "uint32"
        }
      ],
      "name": "PairTradingFeePPMUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "y",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "z",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "A",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "B",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "order0",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "y",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "z",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "A",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "B",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "order1",
          "type": "tuple"
        }
      ],
      "name": "StrategyCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "y",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "z",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "A",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "B",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "order0",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "y",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "z",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "A",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "B",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "order1",
          "type": "tuple"
        }
      ],
      "name": "StrategyDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "y",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "z",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "A",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "B",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "order0",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "y",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "z",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "A",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "B",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "order1",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "reason",
          "type": "uint8"
        }
      ],
      "name": "StrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "tradingFeeAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "byTargetAmount",
          "type": "bool"
        }
      ],
      "name": "TokensTraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevFeePPM",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newFeePPM",
          "type": "uint32"
        }
      ],
      "name": "TradingFeePPMUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "accumulatedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strategyId",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            }
          ],
          "internalType": "struct TradeAction[]",
          "name": "tradeActions",
          "type": "tuple[]"
        }
      ],
      "name": "calculateTradeSourceAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strategyId",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            }
          ],
          "internalType": "struct TradeAction[]",
          "name": "tradeActions",
          "type": "tuple[]"
        }
      ],
      "name": "calculateTradeTargetAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerType",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "id",
              "type": "uint128"
            },
            {
              "internalType": "Token[2]",
              "name": "tokens",
              "type": "address[2]"
            }
          ],
          "internalType": "struct Pair",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "y",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "z",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "A",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "B",
              "type": "uint64"
            }
          ],
          "internalType": "struct Order[2]",
          "name": "orders",
          "type": "tuple[2]"
        }
      ],
      "name": "createStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        }
      ],
      "name": "deleteStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "pair",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "id",
              "type": "uint128"
            },
            {
              "internalType": "Token[2]",
              "name": "tokens",
              "type": "address[2]"
            }
          ],
          "internalType": "struct Pair",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "pairTradingFeePPM",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "Token[2][]",
          "name": "",
          "type": "address[2][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleEmergencyStopper",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleFeesManager",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "newPairTradingFeePPM",
          "type": "uint32"
        }
      ],
      "name": "setPairTradingFeePPM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newTradingFeePPM",
          "type": "uint32"
        }
      ],
      "name": "setTradingFeePPM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "strategiesByPair",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "Token[2]",
              "name": "tokens",
              "type": "address[2]"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "y",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "z",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "A",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "B",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Order[2]",
              "name": "orders",
              "type": "tuple[2]"
            }
          ],
          "internalType": "struct Strategy[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "Token",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "strategiesByPairCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "strategy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "Token[2]",
              "name": "tokens",
              "type": "address[2]"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "y",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "z",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "A",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "B",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Order[2]",
              "name": "orders",
              "type": "tuple[2]"
            }
          ],
          "internalType": "struct Strategy",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strategyId",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            }
          ],
          "internalType": "struct TradeAction[]",
          "name": "tradeActions",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "minReturn",
          "type": "uint128"
        }
      ],
      "name": "tradeBySourceAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strategyId",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            }
          ],
          "internalType": "struct TradeAction[]",
          "name": "tradeActions",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "maxInput",
          "type": "uint128"
        }
      ],
      "name": "tradeByTargetAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingFeePPM",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "y",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "z",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "A",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "B",
              "type": "uint64"
            }
          ],
          "internalType": "struct Order[2]",
          "name": "currentOrders",
          "type": "tuple[2]"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "y",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "z",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "A",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "B",
              "type": "uint64"
            }
          ],
          "internalType": "struct Order[2]",
          "name": "newOrders",
          "type": "tuple[2]"
        }
      ],
      "name": "updateStrategy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Token",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7489aeb6111ccb2281ed811019534769db48bad05afaaa926f98af8bd4647f46",
  "receipt": {
    "to": null,
    "from": "0x5bEBA4D3533a963Dedb270a95ae5f7752fA0Fe22",
    "contractAddress": "0xD59BcAbd00721B754aCB79FE668faE4B6A063fF8",
    "transactionIndex": 90,
    "gasUsed": "5574455",
    "logsBloom": "0x000000040000000008000000000000000800000000000000000000000000000000000000000000000000000000002000000000000000000040000000000000000000000000000000000000200000000000000000000000000000080000000000000000000200004000000000000008000000000000000000200000000000000000000140000000000000040000000000000000000000a0000000000000000008000000000400002000000000000400000040000000000000001000000000000000000000000000000000000000040000000000000000000100000000000020000080200000000000000000020000000000000000000000000000100000100000",
    "blockHash": "0xcef271e7438ccaaa2d866293675800c28852e3eeefc4a85a34d8c57f4623b5a9",
    "transactionHash": "0x7489aeb6111ccb2281ed811019534769db48bad05afaaa926f98af8bd4647f46",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 17920850,
        "transactionHash": "0x7489aeb6111ccb2281ed811019534769db48bad05afaaa926f98af8bd4647f46",
        "address": "0xD59BcAbd00721B754aCB79FE668faE4B6A063fF8",
        "topics": ["0x66db0986e1156e2e747795714bf0301c7e1c695c149a738cb01bcf5cfead8465"],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007d0",
        "logIndex": 217,
        "blockHash": "0xcef271e7438ccaaa2d866293675800c28852e3eeefc4a85a34d8c57f4623b5a9"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 17920850,
        "transactionHash": "0x7489aeb6111ccb2281ed811019534769db48bad05afaaa926f98af8bd4647f46",
        "address": "0xD59BcAbd00721B754aCB79FE668faE4B6A063fF8",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096"
        ],
        "data": "0x",
        "logIndex": 218,
        "blockHash": "0xcef271e7438ccaaa2d866293675800c28852e3eeefc4a85a34d8c57f4623b5a9"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 17920850,
        "transactionHash": "0x7489aeb6111ccb2281ed811019534769db48bad05afaaa926f98af8bd4647f46",
        "address": "0xD59BcAbd00721B754aCB79FE668faE4B6A063fF8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096",
          "0x0000000000000000000000005beba4d3533a963dedb270a95ae5f7752fa0fe22",
          "0x0000000000000000000000005beba4d3533a963dedb270a95ae5f7752fa0fe22"
        ],
        "data": "0x",
        "logIndex": 219,
        "blockHash": "0xcef271e7438ccaaa2d866293675800c28852e3eeefc4a85a34d8c57f4623b5a9"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 17920850,
        "transactionHash": "0x7489aeb6111ccb2281ed811019534769db48bad05afaaa926f98af8bd4647f46",
        "address": "0xD59BcAbd00721B754aCB79FE668faE4B6A063fF8",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xf28f409b8cbe6b50c7ca45afe893f01f69626f8a4e33cb480bc1bc2d618c0845",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096"
        ],
        "data": "0x",
        "logIndex": 220,
        "blockHash": "0xcef271e7438ccaaa2d866293675800c28852e3eeefc4a85a34d8c57f4623b5a9"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 17920850,
        "transactionHash": "0x7489aeb6111ccb2281ed811019534769db48bad05afaaa926f98af8bd4647f46",
        "address": "0xD59BcAbd00721B754aCB79FE668faE4B6A063fF8",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x24a843cae781765d8cdc3bca1cc42497522c0508f4e621c2ca36ceea2fda7b16",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096"
        ],
        "data": "0x",
        "logIndex": 221,
        "blockHash": "0xcef271e7438ccaaa2d866293675800c28852e3eeefc4a85a34d8c57f4623b5a9"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 17920850,
        "transactionHash": "0x7489aeb6111ccb2281ed811019534769db48bad05afaaa926f98af8bd4647f46",
        "address": "0xD59BcAbd00721B754aCB79FE668faE4B6A063fF8",
        "topics": ["0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 222,
        "blockHash": "0xcef271e7438ccaaa2d866293675800c28852e3eeefc4a85a34d8c57f4623b5a9"
      }
    ],
    "blockNumber": 17920850,
    "cumulativeGasUsed": "14501085",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x3660F04B79751e31128f6378eAC70807e38f554E", "0xC537e898CD774e2dCBa3B14Ea6f34C93d5eA45e1"],
  "numDeployments": 4,
  "solcInputHash": "fd34102899bc98842934daeef711d0ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVoucher\",\"name\":\"initVoucher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GreaterThanMaxInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdenticalAddresses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCapacity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientNativeTokenReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndices\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTradeActionAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTradeActionStrategyId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LowerThanMinReturn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeAmountMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutDated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownDelegator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnnecessaryNativeTokenReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"pairId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevFeePPM\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newFeePPM\",\"type\":\"uint32\"}],\"name\":\"PairTradingFeePPMUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"y\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"A\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"B\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"order0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"y\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"A\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"B\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"order1\",\"type\":\"tuple\"}],\"name\":\"StrategyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"y\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"A\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"B\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"order0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"y\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"A\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"B\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"order1\",\"type\":\"tuple\"}],\"name\":\"StrategyDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"y\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"A\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"B\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"order0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"y\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"A\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"B\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"order1\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"StrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tradingFeeAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"byTargetAmount\",\"type\":\"bool\"}],\"name\":\"TokensTraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevFeePPM\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newFeePPM\",\"type\":\"uint32\"}],\"name\":\"TradingFeePPMUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"accumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct TradeAction[]\",\"name\":\"tradeActions\",\"type\":\"tuple[]\"}],\"name\":\"calculateTradeSourceAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct TradeAction[]\",\"name\":\"tradeActions\",\"type\":\"tuple[]\"}],\"name\":\"calculateTradeTargetAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerType\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"id\",\"type\":\"uint128\"},{\"internalType\":\"Token[2]\",\"name\":\"tokens\",\"type\":\"address[2]\"}],\"internalType\":\"struct Pair\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"y\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"A\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"B\",\"type\":\"uint64\"}],\"internalType\":\"struct Order[2]\",\"name\":\"orders\",\"type\":\"tuple[2]\"}],\"name\":\"createStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"name\":\"deleteStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"pair\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"id\",\"type\":\"uint128\"},{\"internalType\":\"Token[2]\",\"name\":\"tokens\",\"type\":\"address[2]\"}],\"internalType\":\"struct Pair\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"pairTradingFeePPM\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"Token[2][]\",\"name\":\"\",\"type\":\"address[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleEmergencyStopper\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleFeesManager\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newPairTradingFeePPM\",\"type\":\"uint32\"}],\"name\":\"setPairTradingFeePPM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newTradingFeePPM\",\"type\":\"uint32\"}],\"name\":\"setTradingFeePPM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"strategiesByPair\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"Token[2]\",\"name\":\"tokens\",\"type\":\"address[2]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"y\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"A\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"B\",\"type\":\"uint64\"}],\"internalType\":\"struct Order[2]\",\"name\":\"orders\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct Strategy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"strategiesByPairCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"strategy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"Token[2]\",\"name\":\"tokens\",\"type\":\"address[2]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"y\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"A\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"B\",\"type\":\"uint64\"}],\"internalType\":\"struct Order[2]\",\"name\":\"orders\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct Strategy\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct TradeAction[]\",\"name\":\"tradeActions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"minReturn\",\"type\":\"uint128\"}],\"name\":\"tradeBySourceAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct TradeAction[]\",\"name\":\"tradeActions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"maxInput\",\"type\":\"uint128\"}],\"name\":\"tradeByTargetAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFeePPM\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"y\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"A\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"B\",\"type\":\"uint64\"}],\"internalType\":\"struct Order[2]\",\"name\":\"currentOrders\",\"type\":\"tuple[2]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"y\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"z\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"A\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"B\",\"type\":\"uint64\"}],\"internalType\":\"struct Order[2]\",\"name\":\"newOrders\",\"type\":\"tuple[2]\"}],\"name\":\"updateStrategy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Token\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Carbon Controller contract\",\"events\":{\"FeesWithdrawn(address,address,uint256,address)\":{\"details\":\"triggered when fees are withdrawn\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"PairCreated(uint128,address,address)\":{\"details\":\"triggered when a new pair is created\"},\"PairTradingFeePPMUpdated(address,address,uint32,uint32)\":{\"details\":\"triggered when the custom trading fee for a given pair is updated\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"StrategyCreated(uint256,address,address,address,(uint128,uint128,uint64,uint64),(uint128,uint128,uint64,uint64))\":{\"details\":\"triggered when a strategy is created\"},\"StrategyDeleted(uint256,address,address,address,(uint128,uint128,uint64,uint64),(uint128,uint128,uint64,uint64))\":{\"details\":\"triggered when a strategy is deleted\"},\"StrategyUpdated(uint256,address,address,(uint128,uint128,uint64,uint64),(uint128,uint128,uint64,uint64),uint8)\":{\"details\":\"triggered when a strategy is updated\"},\"TokensTraded(address,address,address,uint256,uint256,uint128,bool)\":{\"details\":\"triggered when tokens are traded\"},\"TradingFeePPMUpdated(uint32,uint32)\":{\"details\":\"triggered when the network fee is updated\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"accumulatedFees(address)\":{\"details\":\"returns the amount of fees accumulated for the specified token\"},\"calculateTradeSourceAmount(address,address,(uint256,uint128)[])\":{\"details\":\"returns the source amount required when trading by target amount\"},\"calculateTradeTargetAmount(address,address,(uint256,uint128)[])\":{\"details\":\"returns the target amount expected when trading by source amount\"},\"constructor\":{\"details\":\"used to set immutable state variables and initialize the implementation\"},\"controllerType()\":{\"details\":\"returns the type of the controller\"},\"createPair(address,address)\":{\"details\":\"creates a new pair of provided token0 and token1\"},\"createStrategy(address,address,(uint128,uint128,uint64,uint64)[2])\":{\"details\":\"creates a new strategy, returns the strategy's id requirements: - the caller must have approved the tokens with assigned liquidity in the order, if any\"},\"deleteStrategy(uint256)\":{\"details\":\"deletes a strategy matching the provided id notes: - 100% of liquidity is withdrawn and sent to the owner requirements: - the caller must be the owner of the NFT voucher\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize()\":{\"details\":\"fully initializes the contract and its parents\"},\"pair(address,address)\":{\"details\":\"returns a pair's metadata matching the provided token0 and token1\"},\"pairTradingFeePPM(address,address)\":{\"details\":\"returns the trading fee for a given pair (in units of PPM)\"},\"pairs()\":{\"details\":\"returns a list of all supported pairs\"},\"pause()\":{\"details\":\"pauses the CarbonController requirements: - the caller must have the ROLE_EMERGENCY_STOPPER privilege\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"postUpgrade(bytes)\":{\"details\":\"performs post-upgrade initialization requirements: - this must and can be called only once per-upgrade\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"roleAdmin()\":{\"details\":\"returns the admin role\"},\"roleEmergencyStopper()\":{\"details\":\"returns the emergency stopper role\"},\"roleFeesManager()\":{\"details\":\"returns the fees manager role\"},\"setPairTradingFeePPM(address,address,uint32)\":{\"details\":\"sets the custom trading fee for a given pair (in units of PPM) requirements: - the caller must be the admin of the contract\"},\"setTradingFeePPM(uint32)\":{\"details\":\"sets the trading fee (in units of PPM) requirements: - the caller must be the admin of the contract\"},\"strategiesByPair(address,address,uint256,uint256)\":{\"details\":\"returns strategies belonging to a specific pair note that for the full list of strategies pass 0 to both startIndex and endIndex\"},\"strategiesByPairCount(address,address)\":{\"details\":\"returns the count of strategies belonging to a specific pair\"},\"strategy(uint256)\":{\"details\":\"returns a strategy matching the provided id, note tokens and orders are returned sorted as provided upon creation\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tradeBySourceAmount(address,address,(uint256,uint128)[],uint256,uint128)\":{\"details\":\"performs a trade by specifying a fixed source amount notes: - excess native token is returned to the sender if any requirements: - the caller must have approved the source token\"},\"tradeByTargetAmount(address,address,(uint256,uint128)[],uint256,uint128)\":{\"details\":\"performs a trade by specifying a fixed target amount notes: - excess native token is returned to the sender if any requirements: - the caller must have approved the source token\"},\"tradingFeePPM()\":{\"details\":\"returns the trading fee (in units of PPM)\"},\"unpause()\":{\"details\":\"resumes the CarbonController requirements: - the caller must have the ROLE_EMERGENCY_STOPPER privilege\"},\"updateStrategy(uint256,(uint128,uint128,uint64,uint64)[2],(uint128,uint128,uint64,uint64)[2])\":{\"details\":\"updates an existing strategy notes: - currentOrders should reflect the orders values at the time of sending the tx this prevents cases in which the strategy was updated due to a trade between the time the transaction was sent and the time it was mined, thus, giving more control to the strategy owner. - reduced liquidity is refunded to the owner - increased liquidity is deposited - excess native token is returned to the sender if any - the sorting of orders is expected to equal the sorting upon creation requirements: - the caller must have approved the tokens with increased liquidity, if any\"},\"withdrawFees(address,uint256,address)\":{\"details\":\"transfers the accumulated fees to the specified recipient notes: `amount` is capped to the available amount returns the amount withdrawn\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/carbon/CarbonController.sol\":\"CarbonController\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/carbon/CarbonController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport { IVersioned } from \\\"../utility/interfaces/IVersioned.sol\\\";\\nimport { Pairs, Pair } from \\\"./Pairs.sol\\\";\\nimport { Token } from \\\"../token/Token.sol\\\";\\nimport { Strategies, Strategy, TradeAction, Order, TradeTokens } from \\\"./Strategies.sol\\\";\\nimport { Upgradeable } from \\\"../utility/Upgradeable.sol\\\";\\nimport { IVoucher } from \\\"../voucher/interfaces/IVoucher.sol\\\";\\nimport { ICarbonController } from \\\"./interfaces/ICarbonController.sol\\\";\\nimport { Utils, AccessDenied } from \\\"../utility/Utils.sol\\\";\\nimport { OnlyProxyDelegate } from \\\"../utility/OnlyProxyDelegate.sol\\\";\\nimport { MAX_GAP } from \\\"../utility/Constants.sol\\\";\\n\\n/**\\n * @dev Carbon Controller contract\\n */\\ncontract CarbonController is\\n    ICarbonController,\\n    Pairs,\\n    Strategies,\\n    Upgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    OnlyProxyDelegate,\\n    Utils\\n{\\n    // the emergency manager role is required to pause/unpause\\n    bytes32 private constant ROLE_EMERGENCY_STOPPER = keccak256(\\\"ROLE_EMERGENCY_STOPPER\\\");\\n\\n    // the fees manager role is required to withdraw fees\\n    bytes32 private constant ROLE_FEES_MANAGER = keccak256(\\\"ROLE_FEES_MANAGER\\\");\\n\\n    uint16 private constant CONTROLLER_TYPE = 1;\\n\\n    // the voucher contract\\n    IVoucher private immutable _voucher;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP] private __gap;\\n\\n    error IdenticalAddresses();\\n    error UnnecessaryNativeTokenReceived();\\n    error InsufficientNativeTokenReceived();\\n    error DeadlineExpired();\\n\\n    /**\\n     * @dev used to set immutable state variables and initialize the implementation\\n     */\\n    constructor(IVoucher initVoucher, address proxy) OnlyProxyDelegate(proxy) {\\n        _validAddress(address(initVoucher));\\n\\n        _voucher = initVoucher;\\n        initialize();\\n    }\\n\\n    /**\\n     * @dev fully initializes the contract and its parents\\n     */\\n    function initialize() public initializer {\\n        __CarbonController_init();\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __CarbonController_init() internal onlyInitializing {\\n        __Pairs_init();\\n        __Strategies_init();\\n        __Upgradeable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        __CarbonController_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __CarbonController_init_unchained() internal onlyInitializing {\\n        // set up administrative roles\\n        _setRoleAdmin(ROLE_EMERGENCY_STOPPER, ROLE_ADMIN);\\n        _setRoleAdmin(ROLE_FEES_MANAGER, ROLE_ADMIN);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    /**\\n     * @inheritdoc Upgradeable\\n     */\\n    function version() public pure virtual override(IVersioned, Upgradeable) returns (uint16) {\\n        return 4;\\n    }\\n\\n    /**\\n     * @dev returns the emergency stopper role\\n     */\\n    function roleEmergencyStopper() external pure returns (bytes32) {\\n        return ROLE_EMERGENCY_STOPPER;\\n    }\\n\\n    /**\\n     * @dev returns the fees manager role\\n     */\\n    function roleFeesManager() external pure returns (bytes32) {\\n        return ROLE_FEES_MANAGER;\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function controllerType() external pure virtual returns (uint16) {\\n        return CONTROLLER_TYPE;\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function tradingFeePPM() external view returns (uint32) {\\n        return _tradingFeePPM;\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function pairTradingFeePPM(Token token0, Token token1) external view returns (uint32) {\\n        Pair memory _pair = _pair(token0, token1);\\n        return _getPairTradingFeePPM(_pair.id);\\n    }\\n\\n    /**\\n     * @dev sets the trading fee (in units of PPM)\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function setTradingFeePPM(uint32 newTradingFeePPM) external onlyAdmin validFee(newTradingFeePPM) {\\n        _setTradingFeePPM(newTradingFeePPM);\\n    }\\n\\n    /**\\n     * @dev sets the custom trading fee for a given pair (in units of PPM)\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function setPairTradingFeePPM(\\n        Token token0,\\n        Token token1,\\n        uint32 newPairTradingFeePPM\\n    ) external onlyAdmin validFee(newPairTradingFeePPM) {\\n        Pair memory _pair = _pair(token0, token1);\\n        _setPairTradingFeePPM(_pair, newPairTradingFeePPM);\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function createPair(\\n        Token token0,\\n        Token token1\\n    ) external nonReentrant whenNotPaused onlyProxyDelegate returns (Pair memory) {\\n        _validateInputTokens(token0, token1);\\n        return _createPair(token0, token1);\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function pairs() external view returns (Token[2][] memory) {\\n        return _pairs();\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function pair(Token token0, Token token1) external view returns (Pair memory) {\\n        _validateInputTokens(token0, token1);\\n        return _pair(token0, token1);\\n    }\\n\\n    // solhint-disable var-name-mixedcase\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function createStrategy(\\n        Token token0,\\n        Token token1,\\n        Order[2] calldata orders\\n    ) external payable nonReentrant whenNotPaused onlyProxyDelegate returns (uint256) {\\n        _validateInputTokens(token0, token1);\\n\\n        // don't allow unnecessary eth\\n        if (msg.value > 0 && !token0.isNative() && !token1.isNative()) {\\n            revert UnnecessaryNativeTokenReceived();\\n        }\\n\\n        // revert if any of the orders is invalid\\n        _validateOrders(orders);\\n\\n        // create the pair if it does not exist\\n        Pair memory strategyPair;\\n        if (!_pairExists(token0, token1)) {\\n            strategyPair = _createPair(token0, token1);\\n        } else {\\n            strategyPair = _pair(token0, token1);\\n        }\\n\\n        Token[2] memory tokens = [token0, token1];\\n        return _createStrategy(_voucher, tokens, orders, strategyPair, msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function updateStrategy(\\n        uint256 strategyId,\\n        Order[2] calldata currentOrders,\\n        Order[2] calldata newOrders\\n    ) external payable nonReentrant whenNotPaused onlyProxyDelegate {\\n        Pair memory strategyPair = _pairById(_pairIdByStrategyId(strategyId));\\n\\n        // only the owner of the strategy is allowed to delete it\\n        if (msg.sender != _voucher.ownerOf(strategyId)) {\\n            revert AccessDenied();\\n        }\\n\\n        // don't allow unnecessary eth\\n        if (msg.value > 0 && !strategyPair.tokens[0].isNative() && !strategyPair.tokens[1].isNative()) {\\n            revert UnnecessaryNativeTokenReceived();\\n        }\\n\\n        // revert if any of the orders is invalid\\n        _validateOrders(newOrders);\\n\\n        // perform update\\n        _updateStrategy(strategyId, currentOrders, newOrders, strategyPair, msg.sender, msg.value);\\n    }\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function deleteStrategy(uint256 strategyId) external nonReentrant whenNotPaused onlyProxyDelegate {\\n        // find strategy, reverts if none\\n        Pair memory strategyPair = _pairById(_pairIdByStrategyId(strategyId));\\n\\n        // only the owner of the strategy is allowed to delete it\\n        if (msg.sender != _voucher.ownerOf(strategyId)) {\\n            revert AccessDenied();\\n        }\\n\\n        // delete strategy\\n        _deleteStrategy(strategyId, _voucher, strategyPair);\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function strategy(uint256 id) external view returns (Strategy memory) {\\n        Pair memory strategyPair = _pairById(_pairIdByStrategyId(id));\\n        return _strategy(id, _voucher, strategyPair);\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function strategiesByPair(\\n        Token token0,\\n        Token token1,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (Strategy[] memory) {\\n        _validateInputTokens(token0, token1);\\n\\n        Pair memory strategyPair = _pair(token0, token1);\\n        return _strategiesByPair(strategyPair, startIndex, endIndex, _voucher);\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function strategiesByPairCount(Token token0, Token token1) external view returns (uint256) {\\n        _validateInputTokens(token0, token1);\\n\\n        Pair memory strategyPair = _pair(token0, token1);\\n        return _strategiesByPairCount(strategyPair);\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function tradeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        TradeAction[] calldata tradeActions,\\n        uint256 deadline,\\n        uint128 minReturn\\n    ) external payable nonReentrant whenNotPaused onlyProxyDelegate returns (uint128) {\\n        _validateTradeParams(sourceToken, targetToken, deadline, msg.value, minReturn);\\n        Pair memory _pair = _pair(sourceToken, targetToken);\\n        TradeParams memory params = TradeParams({\\n            trader: msg.sender,\\n            tokens: TradeTokens({ source: sourceToken, target: targetToken }),\\n            byTargetAmount: false,\\n            constraint: minReturn,\\n            txValue: msg.value,\\n            pair: _pair,\\n            sourceAmount: 0,\\n            targetAmount: 0\\n        });\\n        _trade(tradeActions, params);\\n        return params.targetAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function tradeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        TradeAction[] calldata tradeActions,\\n        uint256 deadline,\\n        uint128 maxInput\\n    ) external payable nonReentrant whenNotPaused onlyProxyDelegate returns (uint128) {\\n        _validateTradeParams(sourceToken, targetToken, deadline, msg.value, maxInput);\\n\\n        if (sourceToken.isNative()) {\\n            // tx's value should at least match the maxInput\\n            if (msg.value < maxInput) {\\n                revert InsufficientNativeTokenReceived();\\n            }\\n        }\\n\\n        Pair memory _pair = _pair(sourceToken, targetToken);\\n        TradeParams memory params = TradeParams({\\n            trader: msg.sender,\\n            tokens: TradeTokens({ source: sourceToken, target: targetToken }),\\n            byTargetAmount: true,\\n            constraint: maxInput,\\n            txValue: msg.value,\\n            pair: _pair,\\n            sourceAmount: 0,\\n            targetAmount: 0\\n        });\\n        _trade(tradeActions, params);\\n        return params.sourceAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function calculateTradeSourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        TradeAction[] calldata tradeActions\\n    ) external view returns (uint128) {\\n        _validateInputTokens(sourceToken, targetToken);\\n        Pair memory strategyPair = _pair(sourceToken, targetToken);\\n        TradeTokens memory tokens = TradeTokens({ source: sourceToken, target: targetToken });\\n        SourceAndTargetAmounts memory amounts = _tradeSourceAndTargetAmounts(tokens, tradeActions, strategyPair, true);\\n        return amounts.sourceAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function calculateTradeTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        TradeAction[] calldata tradeActions\\n    ) external view returns (uint128) {\\n        _validateInputTokens(sourceToken, targetToken);\\n        Pair memory strategyPair = _pair(sourceToken, targetToken);\\n        TradeTokens memory tokens = TradeTokens({ source: sourceToken, target: targetToken });\\n        SourceAndTargetAmounts memory amounts = _tradeSourceAndTargetAmounts(tokens, tradeActions, strategyPair, false);\\n        return amounts.targetAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function accumulatedFees(Token token) external view validAddress(Token.unwrap(token)) returns (uint256) {\\n        return _accumulatedFees[token];\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonController\\n     */\\n    function withdrawFees(\\n        Token token,\\n        uint256 amount,\\n        address recipient\\n    )\\n        external\\n        whenNotPaused\\n        onlyRoleMember(ROLE_FEES_MANAGER)\\n        validAddress(recipient)\\n        validAddress(Token.unwrap(token))\\n        greaterThanZero(amount)\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        return _withdrawFees(msg.sender, amount, token, recipient);\\n    }\\n\\n    /**\\n     * @dev pauses the CarbonController\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_EMERGENCY_STOPPER privilege\\n     */\\n    function pause() external onlyRoleMember(ROLE_EMERGENCY_STOPPER) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev resumes the CarbonController\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_EMERGENCY_STOPPER privilege\\n     */\\n    function unpause() external onlyRoleMember(ROLE_EMERGENCY_STOPPER) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev validates both tokens are valid addresses and unique\\n     */\\n    function _validateInputTokens(\\n        Token token0,\\n        Token token1\\n    ) private pure validAddress(Token.unwrap(token0)) validAddress(Token.unwrap(token1)) {\\n        if (token0 == token1) {\\n            revert IdenticalAddresses();\\n        }\\n    }\\n\\n    /**\\n     * performs all necessary validations on the trade parameters\\n     */\\n    function _validateTradeParams(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 deadline,\\n        uint256 value,\\n        uint128 constraint\\n    ) private view {\\n        // revert if deadline has passed\\n        if (deadline < block.timestamp) {\\n            revert DeadlineExpired();\\n        }\\n\\n        // validate minReturn / maxInput\\n        _greaterThanZero(constraint);\\n\\n        // make sure source and target tokens are valid\\n        _validateInputTokens(sourceToken, targetToken);\\n\\n        // there shouldn't be any native token sent unless the source token is the native token\\n        if (value > 0 && !sourceToken.isNative()) {\\n            revert UnnecessaryNativeTokenReceived();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5b9becbbf091afbeabddfcb5e8057f58c20e9b53d208ff47d160716369a1d5f\",\"license\":\"BUSL-1.1\"},\"contracts/carbon/Pairs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { Token } from \\\"../token/Token.sol\\\";\\nimport { MAX_GAP } from \\\"../utility/Constants.sol\\\";\\n\\nstruct Pair {\\n    uint128 id;\\n    Token[2] tokens;\\n}\\n\\nabstract contract Pairs is Initializable {\\n    error PairAlreadyExists();\\n    error PairDoesNotExist();\\n\\n    // unique incremental id representing a pair\\n    uint128 private _lastPairId;\\n\\n    // mapping of pairs of tokens to their pair id, tokens are sorted at any order\\n    mapping(Token => mapping(Token => uint128)) private _pairIds;\\n\\n    // mapping between a pairId to its Pair object\\n    mapping(uint128 => Token[2]) private _pairsStorage;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP - 3] private __gap;\\n\\n    /**\\n     * @dev triggered when a new pair is created\\n     */\\n    event PairCreated(uint128 indexed pairId, Token indexed token0, Token indexed token1);\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __Pairs_init() internal onlyInitializing {\\n        __Pairs_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __Pairs_init_unchained() internal onlyInitializing {}\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    /**\\n     * @dev generates and stores a new pair, tokens are assumed unique and valid\\n     */\\n    function _createPair(Token token0, Token token1) internal returns (Pair memory) {\\n        // validate pair existence\\n        if (_pairExists(token0, token1)) {\\n            revert PairAlreadyExists();\\n        }\\n\\n        // sort tokens\\n        Token[2] memory sortedTokens = _sortTokens(token0, token1);\\n\\n        // increment pair id\\n        uint128 id = _lastPairId + 1;\\n        _lastPairId = id;\\n\\n        // store pair\\n        _pairsStorage[id] = sortedTokens;\\n        _pairIds[sortedTokens[0]][sortedTokens[1]] = id;\\n\\n        emit PairCreated(id, sortedTokens[0], sortedTokens[1]);\\n        return Pair({ id: id, tokens: sortedTokens });\\n    }\\n\\n    /**\\n     * @dev return a pair matching the given tokens\\n     */\\n    function _pair(Token token0, Token token1) internal view returns (Pair memory) {\\n        // validate pair existence\\n        if (!_pairExists(token0, token1)) {\\n            revert PairDoesNotExist();\\n        }\\n\\n        // sort tokens\\n        Token[2] memory sortedTokens = _sortTokens(token0, token1);\\n\\n        // return pair\\n        uint128 id = _pairIds[sortedTokens[0]][sortedTokens[1]];\\n        return Pair({ id: id, tokens: sortedTokens });\\n    }\\n\\n    function _pairById(uint128 pairId) internal view returns (Pair memory) {\\n        Token[2] memory tokens = _pairsStorage[pairId];\\n        if (Token.unwrap(tokens[0]) == address(0)) {\\n            revert PairDoesNotExist();\\n        }\\n        return Pair({ id: pairId, tokens: tokens });\\n    }\\n\\n    /**\\n     * @dev check for the existence of a pair (pair id's are sequential integers starting at 1)\\n     */\\n    function _pairExists(Token token0, Token token1) internal view returns (bool) {\\n        // sort tokens\\n        Token[2] memory sortedTokens = _sortTokens(token0, token1);\\n\\n        if (_pairIds[sortedTokens[0]][sortedTokens[1]] == 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev returns a list of all supported pairs\\n     */\\n    function _pairs() internal view returns (Token[2][] memory) {\\n        uint128 length = _lastPairId;\\n        Token[2][] memory list = new Token[2][](length);\\n        for (uint128 i = 0; i < length; i++) {\\n            list[i] = _pairsStorage[i + 1];\\n        }\\n\\n        return list;\\n    }\\n\\n    /**\\n     * returns the given tokens sorted by address value, smaller first\\n     */\\n    function _sortTokens(Token token0, Token token1) private pure returns (Token[2] memory) {\\n        return Token.unwrap(token0) < Token.unwrap(token1) ? [token0, token1] : [token1, token0];\\n    }\\n}\\n\",\"keccak256\":\"0xe238883c87615a13ecedcf1b1e4f4a6576f89a763b9c5d8b1296573675b2cd53\",\"license\":\"BUSL-1.1\"},\"contracts/carbon/Strategies.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { EnumerableSetUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport { MathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport { SafeCastUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { MathEx } from \\\"../utility/MathEx.sol\\\";\\nimport { InvalidIndices } from \\\"../utility/Utils.sol\\\";\\nimport { Token } from \\\"../token/Token.sol\\\";\\nimport { Pair } from \\\"./Pairs.sol\\\";\\nimport { IVoucher } from \\\"../voucher/interfaces/IVoucher.sol\\\";\\nimport { PPM_RESOLUTION } from \\\"../utility/Constants.sol\\\";\\nimport { MAX_GAP } from \\\"../utility/Constants.sol\\\";\\n\\n/**\\n * @dev:\\n *\\n * a strategy consists of two orders:\\n * - order 0 sells `y0` units of token 0 at a marginal rate `M0` ranging between `L0` and `H0`\\n * - order 1 sells `y1` units of token 1 at a marginal rate `M1` ranging between `L1` and `H1`\\n *\\n * rate symbols:\\n * - `L0` indicates the lowest value of one wei of token 0 in units of token 1\\n * - `H0` indicates the highest value of one wei of token 0 in units of token 1\\n * - `M0` indicates the marginal value of one wei of token 0 in units of token 1\\n * - `L1` indicates the lowest value of one wei of token 1 in units of token 0\\n * - `H1` indicates the highest value of one wei of token 1 in units of token 0\\n * - `M1` indicates the marginal value of one wei of token 1 in units of token 0\\n *\\n * the term \\\"one wei\\\" serves here as a simplification of \\\"an amount tending to zero\\\",\\n * hence the rate values above are all theoretical.\\n * moreover, since trade calculation is based on the square roots of the rates,\\n * an order doesn't actually hold the rate values, but a modified version of them.\\n * for each rate `r`, the order maintains:\\n * - mantissa: the value of the 48 most significant bits of `floor(sqrt(r) * 2 ^ 48)`\\n * - exponent: the number of the remaining (least significant) bits, limited up to 48\\n * this allows for rates between ~12.6e-28 and ~7.92e+28, at an average resolution of ~2.81e+14.\\n * it also ensures that every rate value `r` is supported if and only if `1 / r` is supported.\\n * however, it also yields a certain degree of accuracy loss as soon as the order is created.\\n *\\n * encoding / decoding scheme:\\n * - `b(x) = bit-length of x`\\n * - `c(x) = max(b(x) - 48, 0)`\\n * - `f(x) = floor(sqrt(x) * (1 << 48))`\\n * - `g(x) = f(x) >> c(f(x)) << c(f(x))`\\n * - `e(x) = (x >> c(x)) | (c(x) << 48)`\\n * - `d(x) = (x & ((1 << 48) - 1)) << (x >> 48)`\\n *\\n * let the following denote:\\n * - `L = g(lowest rate)`\\n * - `H = g(highest rate)`\\n * - `M = g(marginal rate)`\\n *\\n * then the order maintains:\\n * - `y = current liquidity`\\n * - `z = current liquidity * (H - L) / (M - L)`\\n * - `A = e(H - L)`\\n * - `B = e(L)`\\n *\\n * and the order reflects:\\n * - `L = d(B)`\\n * - `H = d(B + A)`\\n * - `M = d(B + A * y / z)`\\n *\\n * upon trading on a given order in a given strategy:\\n * - the value of `y` in the given order decreases\\n * - the value of `y` in the other order increases\\n * - the value of `z` in the other order may increase\\n * - the values of all other parameters remain unchanged\\n *\\n * given a source amount `x`, the expected target amount is:\\n * - theoretical formula: `M ^ 2 * x * y / (M * (M - L) * x + y)`\\n * - implemented formula: `x * (A * y + B * z) ^ 2 / (A * x * (A * y + B * z) + z ^ 2)`\\n *\\n * given a target amount `x`, the required source amount is:\\n * - theoretical formula: `x * y / (M * (L - M) * x + M ^ 2 * y)`\\n * - implemented formula: `x * z ^ 2 / ((A * y + B * z) * (A * y + B * z - A * x))`\\n *\\n * fee scheme:\\n * +-------------------+---------------------------------+---------------------------------+\\n * | trade function    | trader transfers to contract    | contract transfers to trader    |\\n * +-------------------+---------------------------------+---------------------------------+\\n * | bySourceAmount(x) | trader transfers to contract: x | p = expectedTargetAmount(x)     |\\n * |                   |                                 | q = p * (100 - fee%) / 100      |\\n * |                   |                                 | contract transfers to trader: q |\\n * |                   |                                 | contract retains as fee: p - q  |\\n * +-------------------+---------------------------------+---------------------------------+\\n * | byTargetAmount(x) | p = requiredSourceAmount(x)     | contract transfers to trader: x |\\n * |                   | q = p * 100 / (100 - fee%)      |                                 |\\n * |                   | trader transfers to contract: q |                                 |\\n * |                   | contract retains as fee: q - p  |                                 |\\n * +-------------------+---------------------------------+---------------------------------+\\n */\\n\\n// solhint-disable var-name-mixedcase\\nstruct Order {\\n    uint128 y;\\n    uint128 z;\\n    uint64 A;\\n    uint64 B;\\n}\\n// solhint-enable var-name-mixedcase\\n\\nstruct TradeTokens {\\n    Token source;\\n    Token target;\\n}\\n\\nstruct Strategy {\\n    uint256 id;\\n    address owner;\\n    Token[2] tokens;\\n    Order[2] orders;\\n}\\n\\nstruct TradeAction {\\n    uint256 strategyId;\\n    uint128 amount;\\n}\\n\\n// strategy update reasons\\nuint8 constant STRATEGY_UPDATE_REASON_EDIT = 0;\\nuint8 constant STRATEGY_UPDATE_REASON_TRADE = 1;\\n\\nabstract contract Strategies is Initializable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using Address for address payable;\\n    using MathUpgradeable for uint256;\\n    using SafeCastUpgradeable for uint256;\\n\\n    error NativeAmountMismatch();\\n    error BalanceMismatch();\\n    error GreaterThanMaxInput();\\n    error LowerThanMinReturn();\\n    error InsufficientCapacity();\\n    error InsufficientLiquidity();\\n    error InvalidRate();\\n    error InvalidTradeActionStrategyId();\\n    error InvalidTradeActionAmount();\\n    error OrderDisabled();\\n    error OutDated();\\n\\n    struct SourceAndTargetAmounts {\\n        uint128 sourceAmount;\\n        uint128 targetAmount;\\n    }\\n\\n    struct TradeParams {\\n        address trader;\\n        TradeTokens tokens;\\n        bool byTargetAmount;\\n        uint128 constraint;\\n        uint256 txValue;\\n        Pair pair;\\n        uint128 sourceAmount;\\n        uint128 targetAmount;\\n    }\\n\\n    uint256 private constant ONE = 1 << 48;\\n\\n    uint256 private constant ORDERS_INVERTED_FLAG = 1 << 255;\\n\\n    uint32 private constant DEFAULT_TRADING_FEE_PPM = 2000; // 0.2%\\n\\n    // total number of strategies\\n    uint128 private _strategyCounter;\\n\\n    // the global trading fee (in units of PPM)\\n    uint32 internal _tradingFeePPM;\\n\\n    // mapping between a strategy to its packed orders\\n    mapping(uint256 => uint256[3]) private _packedOrdersByStrategyId;\\n\\n    // mapping between a pair id to its strategies ids\\n    mapping(uint128 => EnumerableSetUpgradeable.UintSet) private _strategyIdsByPairIdStorage;\\n\\n    // accumulated fees per token\\n    mapping(Token => uint256) internal _accumulatedFees;\\n\\n    // mapping between a pair id to its custom trading fee (in units of PPM)\\n    mapping(uint128 pairId => uint32 fee) internal _customTradingFeePPM;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP - 5] private __gap;\\n\\n    /**\\n     * @dev triggered when the network fee is updated\\n     */\\n    event TradingFeePPMUpdated(uint32 prevFeePPM, uint32 newFeePPM);\\n\\n    /**\\n     * @dev triggered when the custom trading fee for a given pair is updated\\n     */\\n    event PairTradingFeePPMUpdated(Token indexed token0, Token indexed token1, uint32 prevFeePPM, uint32 newFeePPM);\\n\\n    /**\\n     * @dev triggered when a strategy is created\\n     */\\n    event StrategyCreated(\\n        uint256 id,\\n        address indexed owner,\\n        Token indexed token0,\\n        Token indexed token1,\\n        Order order0,\\n        Order order1\\n    );\\n\\n    /**\\n     * @dev triggered when a strategy is deleted\\n     */\\n    event StrategyDeleted(\\n        uint256 id,\\n        address indexed owner,\\n        Token indexed token0,\\n        Token indexed token1,\\n        Order order0,\\n        Order order1\\n    );\\n\\n    /**\\n     * @dev triggered when a strategy is updated\\n     */\\n    event StrategyUpdated(\\n        uint256 indexed id,\\n        Token indexed token0,\\n        Token indexed token1,\\n        Order order0,\\n        Order order1,\\n        uint8 reason\\n    );\\n\\n    /**\\n     * @dev triggered when tokens are traded\\n     */\\n    event TokensTraded(\\n        address indexed trader,\\n        Token indexed sourceToken,\\n        Token indexed targetToken,\\n        uint256 sourceAmount,\\n        uint256 targetAmount,\\n        uint128 tradingFeeAmount,\\n        bool byTargetAmount\\n    );\\n\\n    /**\\n     * @dev triggered when fees are withdrawn\\n     */\\n    event FeesWithdrawn(Token indexed token, address indexed recipient, uint256 indexed amount, address sender);\\n\\n    // solhint-disable func-name-mixedcase\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __Strategies_init() internal onlyInitializing {\\n        __Strategies_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __Strategies_init_unchained() internal onlyInitializing {\\n        _setTradingFeePPM(DEFAULT_TRADING_FEE_PPM);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    /**\\n     * @dev creates a new strategy\\n     */\\n    function _createStrategy(\\n        IVoucher voucher,\\n        Token[2] memory tokens,\\n        Order[2] calldata orders,\\n        Pair memory pair,\\n        address owner,\\n        uint256 value\\n    ) internal returns (uint256) {\\n        // transfer funds\\n        _validateDepositAndRefundExcessNativeToken(tokens[0], owner, orders[0].y, value, true);\\n        _validateDepositAndRefundExcessNativeToken(tokens[1], owner, orders[1].y, value, true);\\n\\n        // store id\\n        uint128 counter = _strategyCounter + 1;\\n        _strategyCounter = counter;\\n        uint256 id = _strategyId(pair.id, counter);\\n        _strategyIdsByPairIdStorage[pair.id].add(id);\\n\\n        // store orders\\n        bool ordersInverted = tokens[0] == pair.tokens[1];\\n        _packedOrdersByStrategyId[id] = _packOrders(orders, ordersInverted);\\n\\n        // mint voucher\\n        voucher.mint(owner, id);\\n\\n        // emit event\\n        emit StrategyCreated({\\n            id: id,\\n            owner: owner,\\n            token0: tokens[0],\\n            token1: tokens[1],\\n            order0: orders[0],\\n            order1: orders[1]\\n        });\\n\\n        return id;\\n    }\\n\\n    /**\\n     * @dev updates an existing strategy\\n     */\\n    function _updateStrategy(\\n        uint256 strategyId,\\n        Order[2] calldata currentOrders,\\n        Order[2] calldata newOrders,\\n        Pair memory pair,\\n        address owner,\\n        uint256 value\\n    ) internal {\\n        // prepare storage variable\\n        uint256[3] storage packedOrders = _packedOrdersByStrategyId[strategyId];\\n        uint256[3] memory packedOrdersMemory = packedOrders;\\n        (Order[2] memory orders, bool ordersInverted) = _unpackOrders(packedOrdersMemory);\\n\\n        // revert if the strategy mutated since this tx was sent\\n        if (!_equalStrategyOrders(currentOrders, orders)) {\\n            revert OutDated();\\n        }\\n\\n        // store new values if necessary\\n        uint256[3] memory newPackedOrders = _packOrders(newOrders, ordersInverted);\\n        if (packedOrdersMemory[0] != newPackedOrders[0]) {\\n            packedOrders[0] = newPackedOrders[0];\\n        }\\n        if (packedOrdersMemory[1] != newPackedOrders[1]) {\\n            packedOrders[1] = newPackedOrders[1];\\n        }\\n        if (packedOrdersMemory[2] != newPackedOrders[2]) {\\n            packedOrders[2] = newPackedOrders[2];\\n        }\\n\\n        // deposit and withdraw\\n        Token[2] memory sortedTokens = _sortStrategyTokens(pair, ordersInverted);\\n        for (uint256 i = 0; i < 2; i = uncheckedInc(i)) {\\n            Token token = sortedTokens[i];\\n            if (newOrders[i].y < orders[i].y) {\\n                // liquidity decreased - withdraw the difference\\n                uint128 delta = orders[i].y - newOrders[i].y;\\n                _withdrawFunds(token, payable(owner), delta);\\n            } else if (newOrders[i].y > orders[i].y) {\\n                // liquidity increased - deposit the difference\\n                uint128 delta = newOrders[i].y - orders[i].y;\\n                _validateDepositAndRefundExcessNativeToken(token, owner, delta, value, true);\\n            }\\n\\n            // refund native token when there's no deposit in the order\\n            // note that deposit handles refunds internally\\n            if (value > 0 && token.isNative() && newOrders[i].y <= orders[i].y) {\\n                payable(address(owner)).sendValue(value);\\n            }\\n        }\\n\\n        // emit event\\n        emit StrategyUpdated({\\n            id: strategyId,\\n            token0: sortedTokens[0],\\n            token1: sortedTokens[1],\\n            order0: newOrders[0],\\n            order1: newOrders[1],\\n            reason: STRATEGY_UPDATE_REASON_EDIT\\n        });\\n    }\\n\\n    /**\\n     * @dev deletes a strategy\\n     */\\n    function _deleteStrategy(uint256 strategyId, IVoucher voucher, Pair memory pair) internal {\\n        Strategy memory strategy = _strategy(strategyId, voucher, pair);\\n\\n        // burn the voucher nft token\\n        voucher.burn(strategy.id);\\n\\n        // clear storage\\n        delete _packedOrdersByStrategyId[strategy.id];\\n        _strategyIdsByPairIdStorage[pair.id].remove(strategy.id);\\n\\n        // withdraw funds\\n        _withdrawFunds(strategy.tokens[0], payable(strategy.owner), strategy.orders[0].y);\\n        _withdrawFunds(strategy.tokens[1], payable(strategy.owner), strategy.orders[1].y);\\n\\n        // emit event\\n        emit StrategyDeleted({\\n            id: strategy.id,\\n            owner: strategy.owner,\\n            token0: strategy.tokens[0],\\n            token1: strategy.tokens[1],\\n            order0: strategy.orders[0],\\n            order1: strategy.orders[1]\\n        });\\n    }\\n\\n    /**\\n     * @dev perform trade, update affected strategies\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the source token\\n     */\\n    function _trade(TradeAction[] calldata tradeActions, TradeParams memory params) internal {\\n        bool isTargetToken0 = params.tokens.target == params.pair.tokens[0];\\n\\n        // process trade actions\\n        for (uint256 i = 0; i < tradeActions.length; i = uncheckedInc(i)) {\\n            // prepare variables\\n            uint128 amount = tradeActions[i].amount;\\n            uint256 strategyId = tradeActions[i].strategyId;\\n            uint256[3] storage packedOrders = _packedOrdersByStrategyId[strategyId];\\n            uint256[3] memory packedOrdersMemory = packedOrders;\\n            (Order[2] memory orders, bool ordersInverted) = _unpackOrders(packedOrdersMemory);\\n\\n            _validateTradeParams(params.pair.id, strategyId, amount);\\n\\n            (Order memory targetOrder, Order memory sourceOrder) = isTargetToken0 == ordersInverted\\n                ? (orders[1], orders[0])\\n                : (orders[0], orders[1]);\\n\\n            // calculate the orders new values\\n            (uint128 sourceAmount, uint128 targetAmount) = _singleTradeActionSourceAndTargetAmounts(\\n                targetOrder,\\n                amount,\\n                params.byTargetAmount\\n            );\\n\\n            // handled specifically for a custom error message\\n            if (targetOrder.y < targetAmount) {\\n                revert InsufficientLiquidity();\\n            }\\n\\n            // update the orders with the new values\\n            // safe since it's checked above\\n            unchecked {\\n                targetOrder.y -= targetAmount;\\n            }\\n\\n            sourceOrder.y += sourceAmount;\\n            if (sourceOrder.z < sourceOrder.y) {\\n                sourceOrder.z = sourceOrder.y;\\n            }\\n\\n            // store new values if necessary\\n            uint256[3] memory newPackedOrders = _packOrders(orders, ordersInverted);\\n\\n            // both y values are in slot 0, so it has definitely changed\\n            packedOrders[0] = newPackedOrders[0];\\n\\n            // one of the z values is in slot 1, so it has possibly changed\\n            if (packedOrdersMemory[1] != newPackedOrders[1]) {\\n                packedOrders[1] = newPackedOrders[1];\\n            }\\n\\n            // the other z value has possibly changed only if the first one hasn't\\n            if (packedOrdersMemory[2] != newPackedOrders[2]) {\\n                packedOrders[2] = newPackedOrders[2];\\n            }\\n\\n            // emit update event\\n            emit StrategyUpdated({\\n                id: strategyId,\\n                token0: params.pair.tokens[ordersInverted ? 1 : 0],\\n                token1: params.pair.tokens[ordersInverted ? 0 : 1],\\n                order0: orders[0],\\n                order1: orders[1],\\n                reason: STRATEGY_UPDATE_REASON_TRADE\\n            });\\n\\n            params.sourceAmount += sourceAmount;\\n            params.targetAmount += targetAmount;\\n        }\\n\\n        // apply trading fee\\n        uint128 tradingFeeAmount;\\n        if (params.byTargetAmount) {\\n            uint128 amountIncludingFee = _addFee(params.sourceAmount, params.pair.id);\\n            tradingFeeAmount = amountIncludingFee - params.sourceAmount;\\n            params.sourceAmount = amountIncludingFee;\\n            if (params.sourceAmount > params.constraint) {\\n                revert GreaterThanMaxInput();\\n            }\\n            _accumulatedFees[params.tokens.source] += tradingFeeAmount;\\n        } else {\\n            uint128 amountExcludingFee = _subtractFee(params.targetAmount, params.pair.id);\\n            tradingFeeAmount = params.targetAmount - amountExcludingFee;\\n            params.targetAmount = amountExcludingFee;\\n            if (params.targetAmount < params.constraint) {\\n                revert LowerThanMinReturn();\\n            }\\n            _accumulatedFees[params.tokens.target] += tradingFeeAmount;\\n        }\\n\\n        // transfer funds\\n        _validateDepositAndRefundExcessNativeToken(\\n            params.tokens.source,\\n            params.trader,\\n            params.sourceAmount,\\n            params.txValue,\\n            false\\n        );\\n        _withdrawFunds(params.tokens.target, payable(params.trader), params.targetAmount);\\n\\n        // tokens traded successfully, emit event\\n        emit TokensTraded({\\n            trader: params.trader,\\n            sourceToken: params.tokens.source,\\n            targetToken: params.tokens.target,\\n            sourceAmount: params.sourceAmount,\\n            targetAmount: params.targetAmount,\\n            tradingFeeAmount: tradingFeeAmount,\\n            byTargetAmount: params.byTargetAmount\\n        });\\n    }\\n\\n    /**\\n     * @dev calculates the required amount plus fee\\n     */\\n    function _addFee(uint128 amount, uint128 pairId) private view returns (uint128) {\\n        uint32 tradingFeePPM = _getPairTradingFeePPM(pairId);\\n        // divide the input amount by `1 - fee`\\n        return MathEx.mulDivC(amount, PPM_RESOLUTION, PPM_RESOLUTION - tradingFeePPM).toUint128();\\n    }\\n\\n    /**\\n     * @dev calculates the expected amount minus fee\\n     */\\n    function _subtractFee(uint128 amount, uint128 pairId) private view returns (uint128) {\\n        uint32 tradingFeePPM = _getPairTradingFeePPM(pairId);\\n        // multiply the input amount by `1 - fee`\\n        return MathEx.mulDivF(amount, PPM_RESOLUTION - tradingFeePPM, PPM_RESOLUTION).toUint128();\\n    }\\n\\n    /**\\n     * @dev get the custom trading fee ppm for a given pair (returns default trading fee if not set for pair)\\n     */\\n    function _getPairTradingFeePPM(uint128 pairId) internal view returns (uint32) {\\n        uint32 customTradingFeePPM = _customTradingFeePPM[pairId];\\n        return customTradingFeePPM == 0 ? _tradingFeePPM : customTradingFeePPM;\\n    }\\n\\n    /**\\n     * @dev calculates and returns the total source and target amounts of a trade, including fees\\n     */\\n    function _tradeSourceAndTargetAmounts(\\n        TradeTokens memory tokens,\\n        TradeAction[] calldata tradeActions,\\n        Pair memory pair,\\n        bool byTargetAmount\\n    ) internal view returns (SourceAndTargetAmounts memory totals) {\\n        bool isTargetToken0 = tokens.target == pair.tokens[0];\\n\\n        // process trade actions\\n        for (uint256 i = 0; i < tradeActions.length; i = uncheckedInc(i)) {\\n            // prepare variables\\n            uint128 amount = tradeActions[i].amount;\\n            uint256 strategyId = tradeActions[i].strategyId;\\n            uint256[3] memory packedOrdersMemory = _packedOrdersByStrategyId[strategyId];\\n            (Order[2] memory orders, bool ordersInverted) = _unpackOrders(packedOrdersMemory);\\n\\n            _validateTradeParams(pair.id, strategyId, amount);\\n\\n            Order memory targetOrder = isTargetToken0 == ordersInverted ? orders[1] : orders[0];\\n\\n            // calculate the orders new values\\n            (uint128 sourceAmount, uint128 targetAmount) = _singleTradeActionSourceAndTargetAmounts(\\n                targetOrder,\\n                amount,\\n                byTargetAmount\\n            );\\n\\n            // update totals\\n            totals.sourceAmount += sourceAmount;\\n            totals.targetAmount += targetAmount;\\n        }\\n\\n        // apply trading fee\\n        if (byTargetAmount) {\\n            totals.sourceAmount = _addFee(totals.sourceAmount, pair.id);\\n        } else {\\n            totals.targetAmount = _subtractFee(totals.targetAmount, pair.id);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns stored strategies of a pair\\n     */\\n    function _strategiesByPair(\\n        Pair memory pair,\\n        uint256 startIndex,\\n        uint256 endIndex,\\n        IVoucher voucher\\n    ) internal view returns (Strategy[] memory) {\\n        EnumerableSetUpgradeable.UintSet storage strategyIds = _strategyIdsByPairIdStorage[pair.id];\\n        uint256 allLength = strategyIds.length();\\n\\n        // when the endIndex is 0 or out of bound, set the endIndex to the last value possible\\n        if (endIndex == 0 || endIndex > allLength) {\\n            endIndex = allLength;\\n        }\\n\\n        // revert when startIndex is out of bound\\n        if (startIndex > endIndex) {\\n            revert InvalidIndices();\\n        }\\n\\n        // populate the result\\n        uint256 resultLength = endIndex - startIndex;\\n        Strategy[] memory result = new Strategy[](resultLength);\\n        for (uint256 i = 0; i < resultLength; i = uncheckedInc(i)) {\\n            uint256 strategyId = strategyIds.at(startIndex + i);\\n            result[i] = _strategy(strategyId, voucher, pair);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev returns the count of stored strategies of a pair\\n     */\\n    function _strategiesByPairCount(Pair memory pair) internal view returns (uint256) {\\n        EnumerableSetUpgradeable.UintSet storage strategyIds = _strategyIdsByPairIdStorage[pair.id];\\n        return strategyIds.length();\\n    }\\n\\n    /**\\n     @dev returns a strategy object matching the provided id.\\n     */\\n    function _strategy(uint256 id, IVoucher voucher, Pair memory pair) internal view returns (Strategy memory) {\\n        // fetch data\\n        address _owner = voucher.ownerOf(id);\\n        uint256[3] memory packedOrdersMemory = _packedOrdersByStrategyId[id];\\n        (Order[2] memory orders, bool ordersInverted) = _unpackOrders(packedOrdersMemory);\\n\\n        // handle sorting\\n        Token[2] memory sortedTokens = _sortStrategyTokens(pair, ordersInverted);\\n\\n        return Strategy({ id: id, owner: _owner, tokens: sortedTokens, orders: orders });\\n    }\\n\\n    /**\\n     * @dev validates deposit amounts, refunds excess native tokens sent\\n     */\\n    function _validateDepositAndRefundExcessNativeToken(\\n        Token token,\\n        address owner,\\n        uint256 depositAmount,\\n        uint256 txValue,\\n        bool validateDepositAmount\\n    ) private {\\n        if (token.isNative()) {\\n            if (txValue < depositAmount) {\\n                revert NativeAmountMismatch();\\n            }\\n\\n            // refund the owner for the remaining native token amount\\n            if (txValue > depositAmount) {\\n                payable(address(owner)).sendValue(txValue - depositAmount);\\n            }\\n        } else if (depositAmount > 0) {\\n            if (validateDepositAmount) {\\n                uint256 prevBalance = token.balanceOf(address(this));\\n                token.safeTransferFrom(owner, address(this), depositAmount);\\n                uint256 newBalance = token.balanceOf(address(this));\\n                if (newBalance - prevBalance != depositAmount) {\\n                    revert BalanceMismatch();\\n                }\\n            } else {\\n                token.safeTransferFrom(owner, address(this), depositAmount);\\n            }\\n        }\\n    }\\n\\n    function _validateTradeParams(uint128 pairId, uint256 strategyId, uint128 tradeAmount) private pure {\\n        // make sure the strategy id matches the pair id\\n        if (_pairIdByStrategyId(strategyId) != pairId) {\\n            revert InvalidTradeActionStrategyId();\\n        }\\n\\n        // make sure the trade amount is nonzero\\n        if (tradeAmount == 0) {\\n            revert InvalidTradeActionAmount();\\n        }\\n    }\\n\\n    /**\\n     * @dev sets the trading fee (in units of PPM)\\n     */\\n    function _setTradingFeePPM(uint32 newTradingFeePPM) internal {\\n        uint32 prevTradingFeePPM = _tradingFeePPM;\\n        if (prevTradingFeePPM == newTradingFeePPM) {\\n            return;\\n        }\\n\\n        _tradingFeePPM = newTradingFeePPM;\\n\\n        emit TradingFeePPMUpdated({ prevFeePPM: prevTradingFeePPM, newFeePPM: newTradingFeePPM });\\n    }\\n\\n    /**\\n     * @dev sets the custom trading fee for a given pair (in units of PPM)\\n     */\\n    function _setPairTradingFeePPM(Pair memory pair, uint32 newCustomTradingFeePPM) internal {\\n        uint32 prevCustomTradingFeePPM = _customTradingFeePPM[pair.id];\\n        if (prevCustomTradingFeePPM == newCustomTradingFeePPM) {\\n            return;\\n        }\\n\\n        _customTradingFeePPM[pair.id] = newCustomTradingFeePPM;\\n\\n        emit PairTradingFeePPMUpdated({\\n            token0: pair.tokens[0],\\n            token1: pair.tokens[1],\\n            prevFeePPM: prevCustomTradingFeePPM,\\n            newFeePPM: newCustomTradingFeePPM\\n        });\\n    }\\n\\n    /**\\n     * returns true if the provided orders are equal, false otherwise\\n     */\\n    function _equalStrategyOrders(Order[2] memory orders0, Order[2] memory orders1) internal pure returns (bool) {\\n        uint256 i;\\n        for (i = 0; i < 2; i = uncheckedInc(i)) {\\n            if (\\n                orders0[i].y != orders1[i].y ||\\n                orders0[i].z != orders1[i].z ||\\n                orders0[i].A != orders1[i].A ||\\n                orders0[i].B != orders1[i].B\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    // solhint-disable var-name-mixedcase\\n\\n    /**\\n     * @dev returns:\\n     *\\n     *      x * (A * y + B * z) ^ 2\\n     * ---------------------------------\\n     *  A * x * (A * y + B * z) + z ^ 2\\n     *\\n     */\\n    function _calculateTradeTargetAmount(\\n        uint256 x, // < 2 ^ 128\\n        uint256 y, // < 2 ^ 128\\n        uint256 z, // < 2 ^ 128\\n        uint256 A, // < 2 ^ 96\\n        uint256 B /// < 2 ^ 96\\n    ) private pure returns (uint256) {\\n        if (A == 0) {\\n            if (B == 0) {\\n                revert OrderDisabled();\\n            }\\n            return MathEx.mulDivF(x, B * B, ONE * ONE);\\n        }\\n\\n        uint256 temp1;\\n        uint256 temp2;\\n        unchecked {\\n            temp1 = z * ONE; // < 2 ^ 176\\n            temp2 = y * A + z * B; // < 2 ^ 225\\n        }\\n        uint256 temp3 = temp2 * x;\\n\\n        uint256 factor1 = MathEx.minFactor(temp1, temp1);\\n        uint256 factor2 = MathEx.minFactor(temp3, A);\\n        uint256 factor = MathUpgradeable.max(factor1, factor2);\\n\\n        uint256 temp4 = MathEx.mulDivC(temp1, temp1, factor);\\n        uint256 temp5 = MathEx.mulDivC(temp3, A, factor);\\n        return MathEx.mulDivF(temp2, temp3 / factor, temp4 + temp5);\\n    }\\n\\n    /**\\n     * @dev returns:\\n     *\\n     *                  x * z ^ 2\\n     * -------------------------------------------\\n     *  (A * y + B * z) * (A * y + B * z - A * x)\\n     *\\n     */\\n    function _calculateTradeSourceAmount(\\n        uint256 x, // < 2 ^ 128\\n        uint256 y, // < 2 ^ 128\\n        uint256 z, // < 2 ^ 128\\n        uint256 A, // < 2 ^ 96\\n        uint256 B /// < 2 ^ 96\\n    ) private pure returns (uint256) {\\n        if (A == 0) {\\n            if (B == 0) {\\n                revert OrderDisabled();\\n            }\\n            return MathEx.mulDivC(x, ONE * ONE, B * B);\\n        }\\n\\n        uint256 temp1;\\n        uint256 temp2;\\n        unchecked {\\n            temp1 = z * ONE; // < 2 ^ 176\\n            temp2 = y * A + z * B; // < 2 ^ 225\\n        }\\n        uint256 temp3 = temp2 - x * A;\\n\\n        uint256 factor1 = MathEx.minFactor(temp1, temp1);\\n        uint256 factor2 = MathEx.minFactor(temp2, temp3);\\n        uint256 factor = MathUpgradeable.max(factor1, factor2);\\n\\n        uint256 temp4 = MathEx.mulDivC(temp1, temp1, factor);\\n        uint256 temp5 = MathEx.mulDivF(temp2, temp3, factor);\\n        return MathEx.mulDivC(x, temp4, temp5);\\n    }\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    /**\\n     * @dev pack 2 orders into a 3 slot uint256 data structure\\n     */\\n    function _packOrders(Order[2] memory orders, bool ordersInverted) private pure returns (uint256[3] memory values) {\\n        values = [\\n            uint256((uint256(orders[0].y) << 0) | (uint256(orders[1].y) << 128)),\\n            uint256((uint256(orders[0].z) << 0) | (uint256(orders[0].A) << 128) | (uint256(orders[0].B) << 192)),\\n            uint256(\\n                (uint256(orders[1].z) << 0) |\\n                    (uint256(orders[1].A) << 128) |\\n                    (uint256(orders[1].B) << 192) |\\n                    (ordersInverted ? ORDERS_INVERTED_FLAG : 0)\\n            )\\n        ];\\n    }\\n\\n    /**\\n     * @dev unpack 2 stored orders into an array of Order types\\n     */\\n    function _unpackOrders(\\n        uint256[3] memory values\\n    ) private pure returns (Order[2] memory orders, bool ordersInverted) {\\n        orders = [\\n            Order({\\n                y: uint128(values[0] >> 0),\\n                z: uint128(values[1] >> 0),\\n                A: uint64(values[1] >> 128),\\n                B: uint64(values[1] >> 192)\\n            }),\\n            Order({\\n                y: uint128(values[0] >> 128),\\n                z: uint128(values[2] >> 0),\\n                A: uint64(values[2] >> 128),\\n                B: uint64((values[2] << 1) >> 193)\\n            })\\n        ];\\n        ordersInverted = values[2] >= ORDERS_INVERTED_FLAG;\\n    }\\n\\n    /**\\n     * @dev expand a given rate\\n     */\\n    function _expandRate(uint256 rate) internal pure returns (uint256) {\\n        // safe because no `+` or `-` or `*`\\n        unchecked {\\n            return (rate % ONE) << (rate / ONE);\\n        }\\n    }\\n\\n    /**\\n     * @dev validates a given rate\\n     */\\n    function _validRate(uint256 rate) internal pure returns (bool) {\\n        // safe because no `+` or `-` or `*`\\n        unchecked {\\n            return (ONE >> (rate / ONE)) > 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the source and target amounts of a single trade action\\n     */\\n    function _singleTradeActionSourceAndTargetAmounts(\\n        Order memory order,\\n        uint128 amount,\\n        bool byTargetAmount\\n    ) internal pure returns (uint128 sourceAmount, uint128 targetAmount) {\\n        uint256 y = uint256(order.y);\\n        uint256 z = uint256(order.z);\\n        uint256 a = _expandRate(uint256(order.A));\\n        uint256 b = _expandRate(uint256(order.B));\\n        if (byTargetAmount) {\\n            sourceAmount = _calculateTradeSourceAmount(amount, y, z, a, b).toUint128();\\n            targetAmount = amount;\\n        } else {\\n            sourceAmount = amount;\\n            targetAmount = _calculateTradeTargetAmount(amount, y, z, a, b).toUint128();\\n        }\\n    }\\n\\n    /**\\n     * revert if any of the orders is invalid\\n     */\\n    function _validateOrders(Order[2] calldata orders) internal pure {\\n        for (uint256 i = 0; i < 2; i = uncheckedInc(i)) {\\n            if (orders[i].z < orders[i].y) {\\n                revert InsufficientCapacity();\\n            }\\n            if (!_validRate(orders[i].A)) {\\n                revert InvalidRate();\\n            }\\n            if (!_validRate(orders[i].B)) {\\n                revert InvalidRate();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * returns the strategyId for a given pairId and a given strategyIndex\\n     */\\n    function _strategyId(uint128 pairId, uint128 strategyIndex) internal pure returns (uint256) {\\n        return (uint256(pairId) << 128) | strategyIndex;\\n    }\\n\\n    /**\\n     * returns the pairId associated with a given strategyId\\n     */\\n    function _pairIdByStrategyId(uint256 strategyId) internal pure returns (uint128) {\\n        return uint128(strategyId >> 128);\\n    }\\n\\n    function _withdrawFees(address sender, uint256 amount, Token token, address recipient) internal returns (uint256) {\\n        uint256 accumulatedAmount = _accumulatedFees[token];\\n        if (accumulatedAmount == 0) {\\n            return 0;\\n        }\\n        if (amount > accumulatedAmount) {\\n            amount = accumulatedAmount;\\n        }\\n\\n        _accumulatedFees[token] = accumulatedAmount - amount;\\n        _withdrawFunds(token, payable(recipient), amount);\\n        emit FeesWithdrawn(token, recipient, amount, sender);\\n        return amount;\\n    }\\n\\n    /**\\n     * returns tokens sorted accordingly to a strategy orders inversion\\n     */\\n    function _sortStrategyTokens(Pair memory pair, bool ordersInverted) private pure returns (Token[2] memory) {\\n        return ordersInverted ? [pair.tokens[1], pair.tokens[0]] : pair.tokens;\\n    }\\n\\n    /**\\n     * sends erc20 or native token to the provided target\\n     */\\n    function _withdrawFunds(Token token, address payable target, uint256 amount) private {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (token.isNative()) {\\n            // using a regular transfer here would revert due to exceeding the 2300 gas limit which is why we're using\\n            // call instead (via sendValue), which the 2300 gas limit does not apply for\\n            target.sendValue(amount);\\n        } else {\\n            token.safeTransfer(target, amount);\\n        }\\n    }\\n\\n    function uncheckedInc(uint256 i) private pure returns (uint256 j) {\\n        unchecked {\\n            j = i + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x27d4d04250eff1c56130176703e26a26ad03ba50fe97345c22a921e4d3a7f3b2\",\"license\":\"BUSL-1.1\"},\"contracts/carbon/interfaces/ICarbonController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\nimport { Pair } from \\\"../Pairs.sol\\\";\\nimport { Token } from \\\"../../token/Token.sol\\\";\\nimport { Strategy, TradeAction, Order } from \\\"../Strategies.sol\\\";\\n\\n/**\\n * @dev Carbon Controller interface\\n */\\ninterface ICarbonController is IUpgradeable {\\n    /**\\n     * @dev returns the type of the controller\\n     */\\n    function controllerType() external pure returns (uint16);\\n\\n    /**\\n     * @dev returns the trading fee (in units of PPM)\\n     */\\n    function tradingFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the trading fee for a given pair (in units of PPM)\\n     */\\n    function pairTradingFeePPM(Token token0, Token token1) external view returns (uint32);\\n\\n    /**\\n     * @dev creates a new pair of provided token0 and token1\\n     */\\n    function createPair(Token token0, Token token1) external returns (Pair memory);\\n\\n    /**\\n     * @dev returns a pair's metadata matching the provided token0 and token1\\n     */\\n    function pair(Token token0, Token token1) external view returns (Pair memory);\\n\\n    /**\\n     * @dev returns a list of all supported pairs\\n     */\\n    function pairs() external view returns (Token[2][] memory);\\n\\n    // solhint-disable var-name-mixedcase\\n    /**\\n     * @dev creates a new strategy, returns the strategy's id\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the tokens with assigned liquidity in the order, if any\\n     */\\n    function createStrategy(Token token0, Token token1, Order[2] calldata orders) external payable returns (uint256);\\n\\n    /**\\n     * @dev updates an existing strategy\\n     *\\n     * notes:\\n     * - currentOrders should reflect the orders values at the time of sending the tx\\n     * this prevents cases in which the strategy was updated due to a trade between\\n     * the time the transaction was sent and the time it was mined, thus, giving more\\n     * control to the strategy owner.\\n     * - reduced liquidity is refunded to the owner\\n     * - increased liquidity is deposited\\n     * - excess native token is returned to the sender if any\\n     * - the sorting of orders is expected to equal the sorting upon creation\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the tokens with increased liquidity, if any\\n     */\\n    function updateStrategy(\\n        uint256 strategyId,\\n        Order[2] calldata currentOrders,\\n        Order[2] calldata newOrders\\n    ) external payable;\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    /**\\n     * @dev deletes a strategy matching the provided id\\n     *\\n     * notes:\\n     *\\n     * - 100% of liquidity is withdrawn and sent to the owner\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the NFT voucher\\n     */\\n    function deleteStrategy(uint256 strategyId) external;\\n\\n    /**\\n     * @dev returns a strategy matching the provided id,\\n     * note tokens and orders are returned sorted as provided upon creation\\n     */\\n    function strategy(uint256 id) external view returns (Strategy memory);\\n\\n    /**\\n     * @dev returns strategies belonging to a specific pair\\n     * note that for the full list of strategies pass 0 to both startIndex and endIndex\\n     */\\n    function strategiesByPair(\\n        Token token0,\\n        Token token1,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (Strategy[] memory);\\n\\n    /**\\n     * @dev returns the count of strategies belonging to a specific pair\\n     */\\n    function strategiesByPairCount(Token token0, Token token1) external view returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by specifying a fixed source amount\\n     *\\n     * notes:\\n     *\\n     * - excess native token is returned to the sender if any\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the source token\\n     */\\n    function tradeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        TradeAction[] calldata tradeActions,\\n        uint256 deadline,\\n        uint128 minReturn\\n    ) external payable returns (uint128);\\n\\n    /**\\n     * @dev performs a trade by specifying a fixed target amount\\n     *\\n     * notes:\\n     *\\n     * - excess native token is returned to the sender if any\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the source token\\n     */\\n    function tradeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        TradeAction[] calldata tradeActions,\\n        uint256 deadline,\\n        uint128 maxInput\\n    ) external payable returns (uint128);\\n\\n    /**\\n     * @dev returns the source amount required when trading by target amount\\n     */\\n    function calculateTradeSourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        TradeAction[] calldata tradeActions\\n    ) external view returns (uint128);\\n\\n    /**\\n     * @dev returns the target amount expected when trading by source amount\\n     */\\n    function calculateTradeTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        TradeAction[] calldata tradeActions\\n    ) external view returns (uint128);\\n\\n    /**\\n     * @dev returns the amount of fees accumulated for the specified token\\n     */\\n    function accumulatedFees(Token token) external view returns (uint256);\\n\\n    /**\\n     * @dev transfers the accumulated fees to the specified recipient\\n     *\\n     * notes:\\n     * `amount` is capped to the available amount\\n     * returns the amount withdrawn\\n     */\\n    function withdrawFees(Token token, uint256 amount, address recipient) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xfa9236fc6a200faac750c93ad105333133e3676c0483a7a97675b2c9e8834b06\",\"license\":\"BUSL-1.1\"},\"contracts/token/Token.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @dev This type implements ERC20 and SafeERC20 utilities for both the native token and for ERC20 tokens\\n */\\ntype Token is address;\\nusing SafeERC20 for IERC20;\\n\\n// the address that represents the native token reserve\\naddress constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n// the symbol that represents the native token\\nstring constant NATIVE_TOKEN_SYMBOL = \\\"ETH\\\";\\n\\n// the decimals for the native token\\nuint8 constant NATIVE_TOKEN_DECIMALS = 18;\\n\\n// the token representing the native token\\nToken constant NATIVE_TOKEN = Token.wrap(NATIVE_TOKEN_ADDRESS);\\n\\nusing {\\n    equal as ==,\\n    notEqual as !=,\\n    isNative,\\n    symbol,\\n    decimals,\\n    balanceOf,\\n    allowance,\\n    safeTransfer,\\n    safeTransferFrom,\\n    safeApprove,\\n    safeIncreaseAllowance\\n} for Token global;\\n\\n/* solhint-disable func-visibility */\\n\\nfunction equal(Token a, Token b) pure returns (bool) {\\n    return Token.unwrap(a) == Token.unwrap(b);\\n}\\n\\nfunction notEqual(Token a, Token b) pure returns (bool) {\\n    return Token.unwrap(a) != Token.unwrap(b);\\n}\\n\\n/**\\n * @dev returns whether the provided token represents an ERC20 or the native token reserve\\n */\\nfunction isNative(Token token) pure returns (bool) {\\n    return token == NATIVE_TOKEN;\\n}\\n\\n/**\\n * @dev returns the symbol of the native token/ERC20 token\\n */\\nfunction symbol(Token token) view returns (string memory) {\\n    if (isNative(token)) {\\n        return NATIVE_TOKEN_SYMBOL;\\n    }\\n    return toERC20(token).symbol();\\n}\\n\\n/**\\n * @dev returns the decimals of the native token/ERC20 token\\n */\\nfunction decimals(Token token) view returns (uint8) {\\n    if (isNative(token)) {\\n        return NATIVE_TOKEN_DECIMALS;\\n    }\\n    return toERC20(token).decimals();\\n}\\n\\n/**\\n * @dev returns the balance of the native token/ERC20 token\\n */\\nfunction balanceOf(Token token, address account) view returns (uint256) {\\n    if (isNative(token)) {\\n        return account.balance;\\n    }\\n    return toIERC20(token).balanceOf(account);\\n}\\n\\n/**\\n * @dev returns the allowance of an `owner` to a `spender`\\n */\\nfunction allowance(Token token, address owner, address spender) view returns (uint256) {\\n    if (isNative(token)) {\\n        return 0;\\n    }\\n    return toIERC20(token).allowance(owner, spender);\\n}\\n\\n/**\\n * @dev transfers a specific amount of the native token/ERC20 token\\n */\\nfunction safeTransfer(Token token, address to, uint256 amount) {\\n    if (amount == 0) {\\n        return;\\n    }\\n    if (isNative(token)) {\\n        payable(to).transfer(amount);\\n    } else {\\n        toIERC20(token).safeTransfer(to, amount);\\n    }\\n}\\n\\n/**\\n * @dev transfers a specific amount of the native token/ERC20 token from a specific holder using the allowance mechanism\\n *\\n * note that the function does not perform any action if the native token is provided\\n */\\nfunction safeTransferFrom(Token token, address from, address to, uint256 amount) {\\n    if (amount == 0 || isNative(token)) {\\n        return;\\n    }\\n    toIERC20(token).safeTransferFrom(from, to, amount);\\n}\\n\\n/**\\n * @dev approves a specific amount of the native token/ERC20 token from a specific holder\\n *\\n * note that the function does not perform any action if the native token is provided\\n */\\nfunction safeApprove(Token token, address spender, uint256 amount) {\\n    if (isNative(token)) {\\n        return;\\n    }\\n    toIERC20(token).safeApprove(spender, amount);\\n}\\n\\n/**\\n * @dev atomically increases the allowance granted to `spender` by the caller.\\n *\\n * note that the function does not perform any action if the native token is provided\\n */\\nfunction safeIncreaseAllowance(Token token, address spender, uint256 amount) {\\n    if (isNative(token)) {\\n        return;\\n    }\\n    toIERC20(token).safeIncreaseAllowance(spender, amount);\\n}\\n\\n/**\\n * @dev utility function that converts a token to an IERC20\\n */\\nfunction toIERC20(Token token) pure returns (IERC20) {\\n    return IERC20(Token.unwrap(token));\\n}\\n\\n/**\\n * @dev utility function that converts a token to an ERC20\\n */\\nfunction toERC20(Token token) pure returns (ERC20) {\\n    return ERC20(Token.unwrap(token));\\n}\\n\\n/* solhint-disable func-visibility */\\n\",\"keccak256\":\"0x5877f3f23877d040294d2fad57e36b933a9b44efccc49c03218723d8e71d0062\",\"license\":\"BUSL-1.1\"},\"contracts/utility/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nuint32 constant PPM_RESOLUTION = 1_000_000;\\n\\nuint32 constant MAX_GAP = 50;\\n\",\"keccak256\":\"0x80e0622d62d1415b8e19109151b13705e5b593ffe4fa1c39ea91b6eb27cfd760\",\"license\":\"BUSL-1.1\"},\"contracts/utility/MathEx.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev this library provides a set of complex math operations\\n */\\nlibrary MathEx {\\n    error Overflow();\\n\\n    /**\\n     * @dev returns the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(uint256 x, uint256 y, uint256 z) internal pure returns (uint256) {\\n        // safe because no `+` or `-` or `*`\\n        unchecked {\\n            (uint256 xyhi, uint256 xylo) = _mul512(x, y);\\n\\n            // if `x * y < 2 ^ 256`\\n            if (xyhi == 0) {\\n                return xylo / z;\\n            }\\n\\n            // assert `x * y / z < 2 ^ 256`\\n            if (xyhi >= z) {\\n                revert Overflow();\\n            }\\n\\n            uint256 m = _mulMod(x, y, z); // `m = x * y % z`\\n            (uint256 nhi, uint256 nlo) = _sub512(xyhi, xylo, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n\\n            // if `n < 2 ^ 256`\\n            if (nhi == 0) {\\n                return nlo / z;\\n            }\\n\\n            uint256 p = _unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n            uint256 q = _div512(nhi, nlo, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n            uint256 r = _inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n            return _unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(uint256 x, uint256 y, uint256 z) internal pure returns (uint256) {\\n        uint256 w = mulDivF(x, y, z);\\n        if (_mulMod(x, y, z) > 0) {\\n            if (w >= type(uint256).max) {\\n                revert Overflow();\\n            }\\n            unchecked {\\n                // safe because `w < type(uint256).max`\\n                return w + 1;\\n            }\\n        }\\n        return w;\\n    }\\n\\n    /**\\n     * @dev returns the smallest integer `z` such that `x * y / z <= 2 ^ 256 - 1`\\n     */\\n    function minFactor(uint256 x, uint256 y) internal pure returns (uint256) {\\n        (uint256 hi, uint256 lo) = _mul512(x, y);\\n        unchecked {\\n            // safe because:\\n            // - if `x < 2 ^ 256 - 1` or `y < 2 ^ 256 - 1`\\n            //   then `hi < 2 ^ 256 - 2`\\n            //   hence neither `hi + 1` nor `hi + 2` overflows\\n            // - if `x = 2 ^ 256 - 1` and `y = 2 ^ 256 - 1`\\n            //   then `hi = 2 ^ 256 - 2 = ~lo`\\n            //   hence `hi + 1`, which does not overflow, is computed\\n            return hi > ~lo ? hi + 2 : hi + 1;\\n        }\\n\\n        /* reasoning:\\n        |\\n        |   general:\\n        |   - find the smallest integer `z` such that `x * y / z <= 2 ^ 256 - 1`\\n        |   - the value of `x * y` is represented via `2 ^ 256 * hi + lo`\\n        |   - the expression `~lo` is equivalent to `2 ^ 256 - 1 - lo`\\n        |   \\n        |   symbols:\\n        |   - let `H` denote `hi`\\n        |   - let `L` denote `lo`\\n        |   - let `N` denote `2 ^ 256 - 1`\\n        |   \\n        |   inference:\\n        |   `x * y / z <= 2 ^ 256 - 1`     <-->\\n        |   `x * y / (2 ^ 256 - 1) <= z`   <-->\\n        |   `((N + 1) * H + L) / N <= z`   <-->\\n        |   `(N * H + H + L) / N <= z`     <-->\\n        |   `H + (H + L) / N <= z`\\n        |   \\n        |   inference:\\n        |   `0 <= H <= N && 0 <= L <= N`   <-->\\n        |   `0 <= H + L <= N + N`          <-->\\n        |   `0 <= H + L <= N * 2`          <-->\\n        |   `0 <= (H + L) / N <= 2`\\n        |   \\n        |   inference:\\n        |   - `0 = (H + L) / N` --> `H + L = 0` --> `x * y = 0` --> `z = 1 = H + 1`\\n        |   - `0 < (H + L) / N <= 1` --> `H + (H + L) / N <= H + 1` --> `z = H + 1`\\n        |   - `1 < (H + L) / N <= 2` --> `H + (H + L) / N <= H + 2` --> `z = H + 2`\\n        |   \\n        |   implementation:\\n        |   - if `hi > ~lo`:\\n        |     `~L < H <= N`                         <-->\\n        |     `N - L < H <= N`                      <-->\\n        |     `N < H + L <= N + L`                  <-->\\n        |     `1 < (H + L) / N <= 2`                <-->\\n        |     `H + 1 < H + (H + L) / N <= H + 2`    <-->\\n        |     `z = H + 2`\\n        |   - if `hi <= ~lo`:\\n        |     `H <= ~L`                             <-->\\n        |     `H <= N - L`                          <-->\\n        |     `H + L <= N`                          <-->\\n        |     `(H + L) / N <= 1`                    <-->\\n        |     `H + (H + L) / N <= H + 1`            <-->\\n        |     `z = H + 1`\\n        |\\n        */\\n    }\\n\\n    /**\\n     * @dev returns the value of `x * y`\\n     */\\n    function _mul512(uint256 x, uint256 y) private pure returns (uint256, uint256) {\\n        uint256 p = _mulModMax(x, y);\\n        uint256 q = _unsafeMul(x, y);\\n        if (p >= q) {\\n            unchecked {\\n                // safe because `p >= q`\\n                return (p - q, q);\\n            }\\n        }\\n        unchecked {\\n            // safe because `p < q` hence `_unsafeSub(p, q) > 0`\\n            return (_unsafeSub(p, q) - 1, q);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the value of `x - y`\\n     */\\n    function _sub512(uint256 xhi, uint256 xlo, uint256 y) private pure returns (uint256, uint256) {\\n        if (xlo >= y) {\\n            unchecked {\\n                // safe because `xlo >= y`\\n                return (xhi, xlo - y);\\n            }\\n        }\\n        return (xhi - 1, _unsafeSub(xlo, y));\\n    }\\n\\n    /**\\n     * @dev returns the value of `x / pow2n`, given that `x` is divisible by `pow2n`\\n     */\\n    function _div512(uint256 xhi, uint256 xlo, uint256 pow2n) private pure returns (uint256) {\\n        // safe because no `+` or `-` or `*`\\n        unchecked {\\n            uint256 pow2nInv = _unsafeAdd(_unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n            return _unsafeMul(xhi, pow2nInv) | (xlo / pow2n); // `(xhi << (256 - n)) | (xlo >> n)`\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the inverse of `d` modulo `2 ^ 256`, given that `d` is congruent to `1` modulo `2`\\n     */\\n    function _inv256(uint256 d) private pure returns (uint256) {\\n        // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n        uint256 x = 1;\\n        unchecked {\\n            // safe because `i < 8`\\n            for (uint256 i = 0; i < 8; i++) {\\n                x = _unsafeMul(x, _unsafeSub(2, _unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n            }\\n        }\\n        return x;\\n    }\\n\\n    /**\\n     * @dev returns `(x + y) % 2 ^ 256`\\n     */\\n    function _unsafeAdd(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x + y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x - y) % 2 ^ 256`\\n     */\\n    function _unsafeSub(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x - y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x * y) % 2 ^ 256`\\n     */\\n    function _unsafeMul(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x * y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `x * y % (2 ^ 256 - 1)`\\n     */\\n    function _mulModMax(uint256 x, uint256 y) private pure returns (uint256) {\\n        return mulmod(x, y, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev returns `x * y % z`\\n     */\\n    function _mulMod(uint256 x, uint256 y, uint256 z) private pure returns (uint256) {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x944fc558dec8d96c2caeb5a5a597773911cc061a8a7f7d0c56e7fdaa75e6e408\",\"license\":\"BUSL-1.1\"},\"contracts/utility/OnlyProxyDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev restrict delegation\\n */\\nabstract contract OnlyProxyDelegate {\\n    address private immutable _proxy;\\n\\n    error UnknownDelegator();\\n\\n    constructor(address proxy) {\\n        _proxy = proxy;\\n    }\\n\\n    modifier onlyProxyDelegate() {\\n        _onlyProxyDelegate();\\n\\n        _;\\n    }\\n\\n    function _onlyProxyDelegate() internal view {\\n        if (address(this) != _proxy) {\\n            revert UnknownDelegator();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x552adffb3b2e330d12e5f70f6be9c13190edfed9838ac5b1d7cf07ce1b56ad27\",\"license\":\"BUSL-1.1\"},\"contracts/utility/Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport { AccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport { IUpgradeable } from \\\"./interfaces/IUpgradeable.sol\\\";\\n\\nimport { AccessDenied } from \\\"./Utils.sol\\\";\\n\\nimport { MAX_GAP } from \\\"./Constants.sol\\\";\\n\\n/**\\n * @dev this contract provides common utilities for upgradeable contracts\\n *\\n * note that we're using the Transparent Upgradeable Proxy pattern and *not* the Universal Upgradeable Proxy Standard\\n * (UUPS) pattern, therefore initializing the implementation contracts is not necessary or required\\n */\\nabstract contract Upgradeable is IUpgradeable, AccessControlEnumerableUpgradeable {\\n    error AlreadyInitialized();\\n\\n    // the admin role is used to allow a non-proxy admin to perform additional initialization/setup during contract\\n    // upgrades\\n    bytes32 internal constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\");\\n\\n    uint16 internal _initializations;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP - 1] private __gap;\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __Upgradeable_init() internal onlyInitializing {\\n        __AccessControl_init();\\n\\n        __Upgradeable_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __Upgradeable_init_unchained() internal onlyInitializing {\\n        _initializations = 1;\\n\\n        // set up administrative roles\\n        _setRoleAdmin(ROLE_ADMIN, ROLE_ADMIN);\\n\\n        // allow the deployer to initially be the admin of the contract\\n        _setupRole(ROLE_ADMIN, msg.sender);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    modifier onlyAdmin() {\\n        _hasRole(ROLE_ADMIN, msg.sender);\\n\\n        _;\\n    }\\n\\n    modifier onlyRoleMember(bytes32 role) {\\n        _hasRole(role, msg.sender);\\n\\n        _;\\n    }\\n\\n    function version() public view virtual override returns (uint16);\\n\\n    /**\\n     * @dev returns the admin role\\n     */\\n    function roleAdmin() external pure returns (bytes32) {\\n        return ROLE_ADMIN;\\n    }\\n\\n    /**\\n     * @dev performs post-upgrade initialization\\n     *\\n     * requirements:\\n     *\\n     * - this must and can be called only once per-upgrade\\n     */\\n    function postUpgrade(bytes calldata data) external {\\n        uint16 initializations = _initializations + 1;\\n        if (initializations != version()) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        _initializations = initializations;\\n\\n        _postUpgrade(data);\\n    }\\n\\n    /**\\n     * @dev an optional post-upgrade callback that can be implemented by child contracts\\n     */\\n    function _postUpgrade(bytes calldata /* data */) internal virtual {}\\n\\n    function _hasRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e376fff44513f87ffb6359969ad0bd3221651c5c64f5458d5aba36d095cb155\",\"license\":\"BUSL-1.1\"},\"contracts/utility/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { PPM_RESOLUTION } from \\\"./Constants.sol\\\";\\nimport { Token } from \\\"../token/Token.sol\\\";\\n\\nerror AccessDenied();\\nerror InvalidAddress();\\nerror InvalidFee();\\nerror ZeroValue();\\nerror InvalidIndices();\\n\\n/**\\n * @dev common utilities\\n */\\nabstract contract Utils {\\n    using Address for address payable;\\n\\n    // verifies that a value is greater than zero\\n    modifier greaterThanZero(uint256 value) {\\n        _greaterThanZero(value);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _greaterThanZero(uint256 value) internal pure {\\n        if (value == 0) {\\n            revert ZeroValue();\\n        }\\n    }\\n\\n    // validates an address - currently only checks that it isn't null\\n    modifier validAddress(address addr) {\\n        _validAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validAddress(address addr) internal pure {\\n        if (addr == address(0)) {\\n            revert InvalidAddress();\\n        }\\n    }\\n\\n    // ensures that the fee is valid\\n    modifier validFee(uint32 fee) {\\n        _validFee(fee);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validFee(uint32 fee) internal pure {\\n        if (fee > PPM_RESOLUTION) {\\n            revert InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1954602c3b1d518b123fefd16e00ac2e22084e781abb89c3089f7dc829f20fd9\",\"license\":\"BUSL-1.1\"},\"contracts/utility/interfaces/IUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { IVersioned } from \\\"./IVersioned.sol\\\";\\n\\nimport { IAccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @dev this is the common interface for upgradeable contracts\\n */\\ninterface IUpgradeable is IAccessControlEnumerableUpgradeable, IVersioned {\\n\\n}\\n\",\"keccak256\":\"0xa13bde2a8b00010d003c933cd20d11379c2fa99ae0349c4765bd81ddb7cb2eb8\",\"license\":\"BUSL-1.1\"},\"contracts/utility/interfaces/IVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev an interface for a versioned contract\\n */\\ninterface IVersioned {\\n    function version() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x96ab608c8ed8b0363984868c5e42f5a4f22f2f9e67a6630ba174fb5be750c360\",\"license\":\"BUSL-1.1\"},\"contracts/voucher/interfaces/IVoucher.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { IERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\n/**\\n * @dev Voucher interface\\n */\\ninterface IVoucher is IUpgradeable, IERC721Upgradeable {\\n    /**\\n     * @dev creates a new voucher token for the given strategyId, transfers it to the owner\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_MINTER privilege\\n     *\\n     */\\n    function mint(address owner, uint256 strategyId) external;\\n\\n    /**\\n     * @dev destroys the voucher token for the given strategyId\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_MINTER privilege\\n     *\\n     */\\n    function burn(uint256 strategyId) external;\\n\\n    /**\\n     * @dev returns a list of tokenIds belonging to the given owner\\n     * note that for the full list of tokenIds pass 0 to both startIndex and endIndex\\n     */\\n    function tokensByOwner(\\n        address owner,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x645f48b84cb30d91cc7e6b01defb0d856edf73db11ac1f083455a776b428f979\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102855760003560e01c80638cd2403d11610153578063c9c65396116100cb578063f2bda26d1161007f578063f74dad8111610064578063f74dad811461077c578063fcf66664146107a9578063ffb0a4a0146107c957600080fd5b8063f2bda26d14610749578063f727473a1461076957600080fd5b8063d547741f116100b0578063d547741f146106e7578063f06f8acd14610707578063f1c5e0141461073657600080fd5b8063c9c65396146106a7578063ca15c873146106c757600080fd5b80639ba372c211610122578063b76040cd11610107578063b76040cd14610631578063ba0a868b14610645578063bc88d7e41461067a57600080fd5b80639ba372c2146105fc578063a217fddf1461061c57600080fd5b80638cd2403d1461052b5780639010d07c1461054b57806391d148541461058357806393867fb5146105c957600080fd5b80633f4ba83a1161020157806369a4dea7116101b55780638456cb591161019a5780638456cb59146104c95780638672d545146104de578063873020371461050b57600080fd5b806369a4dea7146104945780638129fc1c146104b457600080fd5b806354fd4d50116101e657806354fd4d501461043857806355817d1d1461045b5780635c975abb1461047b57600080fd5b80633f4ba83a146103f057806341f435b31461040557600080fd5b80632ab2fad1116102585780632f2ff15d1161023d5780632f2ff15d14610390578063322cf844146103b057806336568abe146103d057600080fd5b80632ab2fad11461033d5780632c40de1b1461035d57600080fd5b806301ffc9a71461028a578063102ee9ba146102bf57806321589fa1146102ea578063248a9ca3146102ff575b600080fd5b34801561029657600080fd5b506102aa6102a5366004615353565b6107eb565b60405190151581526020015b60405180910390f35b6102d26102cd36600461540b565b610847565b6040516001600160801b0390911681526020016102b6565b6102fd6102f836600461549e565b610961565b005b34801561030b57600080fd5b5061032f61031a3660046154de565b600090815260c9602052604090206001015490565b6040519081526020016102b6565b34801561034957600080fd5b506102d26103583660046154f7565b610ad5565b34801561036957600080fd5b507f24a843cae781765d8cdc3bca1cc42497522c0508f4e621c2ca36ceea2fda7b1661032f565b34801561039c57600080fd5b506102fd6103ab36600461555c565b610b2f565b3480156103bc57600080fd5b5061032f6103cb36600461558c565b610b54565b3480156103dc57600080fd5b506102fd6103eb36600461555c565b610b77565b3480156103fc57600080fd5b506102fd610c08565b34801561041157600080fd5b507ff28f409b8cbe6b50c7ca45afe893f01f69626f8a4e33cb480bc1bc2d618c084561032f565b34801561044457600080fd5b5060045b60405161ffff90911681526020016102b6565b34801561046757600080fd5b506102fd6104763660046155ce565b610c3e565b34801561048757600080fd5b506101915460ff166102aa565b3480156104a057600080fd5b506102fd6104af36600461560c565b610c91565b3480156104c057600080fd5b506102fd610cce565b3480156104d557600080fd5b506102fd610ded565b3480156104ea57600080fd5b506104fe6104f936600461558c565b610e20565b6040516102b69190615653565b34801561051757600080fd5b506102fd6105263660046154de565b610e43565b34801561053757600080fd5b506102fd610546366004615677565b610f5e565b34801561055757600080fd5b5061056b6105663660046156e9565b610fcb565b6040516001600160a01b0390911681526020016102b6565b34801561058f57600080fd5b506102aa61059e36600461555c565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156105d557600080fd5b507f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509661032f565b34801561060857600080fd5b5061032f61061736600461570b565b610fe3565b34801561062857600080fd5b5061032f600081565b34801561063d57600080fd5b506001610448565b34801561065157600080fd5b5061066561066036600461558c565b611062565b60405163ffffffff90911681526020016102b6565b34801561068657600080fd5b5061069a6106953660046154de565b61107e565b6040516102b691906157ef565b3480156106b357600080fd5b506104fe6106c236600461558c565b6110c2565b3480156106d357600080fd5b5061032f6106e23660046154de565b611103565b3480156106f357600080fd5b506102fd61070236600461555c565b61111a565b34801561071357600080fd5b50606554700100000000000000000000000000000000900463ffffffff16610665565b6102d261074436600461540b565b61113f565b34801561075557600080fd5b506102d26107643660046154f7565b6111f5565b61032f6107773660046157fe565b61124b565b34801561078857600080fd5b5061079c61079736600461583e565b61135f565b6040516102b69190615884565b3480156107b557600080fd5b5061032f6107c43660046158d3565b6113a5565b3480156107d557600080fd5b506107de6113ce565b6040516102b691906158f0565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806108415750610841826113dd565b92915050565b6000610851611474565b6108596114cf565b610861611525565b61086e8787853486611587565b610880876001600160a01b031661161a565b156108c857816001600160801b03163410156108c8576040517f7038b89900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108d48888611641565b6040805161010081018252338152815180830183526001600160a01b038c811682528b166020828101919091528201526001918101919091526001600160801b038516606082015234608082015260a08101829052600060c0820181905260e08201529091506109458787836116e5565b60c00151915050610957600161015f55565b9695505050505050565b610969611474565b6109716114cf565b610979611525565b600061098d6109888560801c90565b611caa565b6040516331a9108f60e11b8152600481018690529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa1580156109f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a19919061593d565b6001600160a01b0316336001600160a01b031614610a4a57604051634ca8886760e01b815260040160405180910390fd5b600034118015610a7657506020810151610a749060005b60200201516001600160a01b031661161a565b155b8015610a8f57506020810151610a8d906001610a61565b155b15610aad57604051631334bf4f60e11b815260040160405180910390fd5b610ab682611d82565b610ac4848484843334611f0e565b50610ad0600161015f55565b505050565b6000610ae18585612326565b6000610aed8686611641565b604080518082019091526001600160a01b038089168252871660208201529091506000610b1d8287878685612385565b6020015193505050505b949350505050565b600082815260c96020526040902060010154610b4a81612549565b610ad08383612553565b6000610b608383612326565b6000610b6c8484611641565b9050610b2781612575565b6001600160a01b0381163314610bfa5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b610c048282612597565b5050565b7ff28f409b8cbe6b50c7ca45afe893f01f69626f8a4e33cb480bc1bc2d618c0845610c3381336125b9565b610c3b6125fc565b50565b610c687f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096336125b9565b80610c728161264f565b6000610c7e8585611641565b9050610c8a8184612692565b5050505050565b610cbb7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096336125b9565b80610cc58161264f565b610c048261277b565b600054610100900460ff1615808015610cee5750600054600160ff909116105b80610d085750303b158015610d08575060005460ff166001145b610d7a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610bf1565b6000805460ff191660011790558015610d9d576000805461ff0019166101001790555b610da5612831565b8015610c3b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b7ff28f409b8cbe6b50c7ca45afe893f01f69626f8a4e33cb480bc1bc2d618c0845610e1881336125b9565b610c3b6128cc565b610e286151ce565b610e328383612326565b610e3c8383611641565b9392505050565b610e4b611474565b610e536114cf565b610e5b611525565b6000610e6a6109888360801c90565b6040516331a9108f60e11b8152600481018490529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef6919061593d565b6001600160a01b0316336001600160a01b031614610f2757604051634ca8886760e01b815260040160405180910390fd5b610f52827f00000000000000000000000000000000000000000000000000000000000000008361290a565b50610c3b600161015f55565b61012d54600090610f749061ffff166001615986565b905061ffff8116600414610fb4576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012d805461ffff191661ffff8316179055505050565b600082815260fb60205260408120610e3c9083612ac9565b6000610fed6114cf565b7f24a843cae781765d8cdc3bca1cc42497522c0508f4e621c2ca36ceea2fda7b1661101881336125b9565b8261102281612ad5565b8561102c81612ad5565b8561103681612b15565b61103e611474565b61104a33888a89612b4f565b9450611057600161015f55565b505050509392505050565b60008061106f8484611641565b9050610b278160000151612c03565b6110866151f6565b60006110956109888460801c90565b9050610e3c837f000000000000000000000000000000000000000000000000000000000000000083612c52565b6110ca6151ce565b6110d2611474565b6110da6114cf565b6110e2611525565b6110ec8383612326565b6110f68383612d53565b9050610841600161015f55565b600081815260fb6020526040812061084190612eb5565b600082815260c9602052604090206001015461113581612549565b610ad08383612597565b6000611149611474565b6111516114cf565b611159611525565b6111668787853486611587565b60006111728888611641565b6040805161010081018252338152815180830183526001600160a01b038c811682528b1660208281019190915282015260009181018290526001600160801b038616606082015234608082015260a0810183905260c0810182905260e08101919091529091506111e38787836116e5565b60e00151915050610957600161015f55565b60006112018585612326565b600061120d8686611641565b604080518082019091526001600160a01b03808916825287166020820152909150600061123e828787866001612385565b5198975050505050505050565b6000611255611474565b61125d6114cf565b611265611525565b61126f8484612326565b60003411801561128e575061128c846001600160a01b031661161a565b155b80156112a957506112a7836001600160a01b031661161a565b155b156112c757604051631334bf4f60e11b815260040160405180910390fd5b6112d082611d82565b6112d86151ce565b6112e28585612ebf565b6112f7576112f08585612d53565b9050611304565b6113018585611641565b90505b604080518082019091526001600160a01b038087168252851660208201526113507f00000000000000000000000000000000000000000000000000000000000000008286853334612f22565b92505050610e3c600161015f55565b606061136b8585612326565b60006113778686611641565b90506109578185857f000000000000000000000000000000000000000000000000000000000000000061314f565b6000816113b181612ad5565b50506001600160a01b031660009081526068602052604090205490565b60606113d8613294565b905090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061084157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610841565b600261015f54036114c75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610bf1565b600261015f55565b6101915460ff16156115235760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610bf1565b565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611523576040517fd0c8bfe500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428310156115c1576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115d3816001600160801b0316612b15565b6115dd8585612326565b6000821180156115fc57506115fa856001600160a01b031661161a565b155b15610c8a57604051631334bf4f60e11b815260040160405180910390fd5b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610841565b6116496151ce565b6116538383612ebf565b611689576040517fc5fc4bf400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061169584846133b3565b80516001600160a01b039081166000908152603460209081526040808320828601519094168352928152908290205482518084019093526001600160801b03168252810191909152949350505050565b60006117248260200151602001518360a001516020015160006002811061170e5761170e61595a565b60200201516001600160a01b0390811691161490565b905060005b83811015611a205760008585838181106117455761174561595a565b905060400201602001602081019061175d91906159a1565b905060008686848181106117735761177361595a565b60409081029290920135600081815260666020528381208451606081019586905292955093909250839060039082845b8154815260200190600101908083116117a357505050505090506000806117c983613419565b915091506117e08960a0015160000151868861350d565b6000808215158a1515146117fa5783516020850151611802565b602084015184515b91509150600080611818848b8f604001516135a4565b91509150806001600160801b031684600001516001600160801b0316101561186c576040517fbb55fd2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83518190036001600160801b0316845282518290849061188d9083906159bc565b6001600160801b03908116909152845160208601519082169116101590506118c05782516001600160801b031660208401525b60006118cc8787613680565b80518a55602080820151908a0151919250146118ed57602081015160018a01555b604080820151908901511461190757604081015160028a01555b8d60a00151602001518661191c57600161191f565b60005b60ff16600281106119325761193261595a565b60200201516001600160a01b03168e60a001516020015187611955576000611958565b60015b60ff166002811061196b5761196b61595a565b60200201516001600160a01b03168b7f720da23a5c920b1d8827ec83c4d3c4d90d9419eadb0036b88cb4c2ffa91aef7d8a600060200201518b6001602002015160016040516119bc939291906159dc565b60405180910390a4828e60c0018181516119d691906159bc565b6001600160801b031690525060e08e0180518391906119f69083906159bc565b6001600160801b0316905250611a199a508b99506137ae98505050505050505050565b9050611729565b506000826040015115611aee576000611a458460c001518560a00151600001516137b4565b90508360c0015181611a579190615a7a565b6001600160801b0380831660c08701819052606087015192945091161015611aab576040517f0699263d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602080850151516001600160a01b0316600090815260689091526040812080546001600160801b0385169290611ae2908490615a9a565b90915550611bac915050565b6000611b068460e001518560a00151600001516137eb565b9050808460e00151611b189190615a7a565b6001600160801b0380831660e08701819052606087015192945091161115611b6c576040517ff602de8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808501518101516001600160a01b0316600090815260689091526040812080546001600160801b0385169290611ba5908490615a9a565b9091555050505b611bd783602001516000015184600001518560c001516001600160801b031686608001516000613825565b611bfb83602001516020015184600001518560e001516001600160801b031661394d565b8260200151602001516001600160a01b03168360200151600001516001600160a01b031684600001516001600160a01b03167f95f3b01351225fea0e69a46f68b164c9dea10284f12cd4a907ce66510ab7af6a8660c001518760e00151868960400151604051611c9394939291906001600160801b039485168152928416602084015292166040820152901515606082015260800190565b60405180910390a45050505050565b600161015f55565b611cb26151ce565b6001600160801b0382166000908152603560205260408082208151808301928390529160029082845b81546001600160a01b03168152600190910190602001808311611cdb575050505050905060006001600160a01b031681600060028110611d1d57611d1d61595a565b60200201516001600160a01b031603611d62576040517fc5fc4bf400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080518082019091526001600160801b03909316835260208301525090565b60005b6002811015610c0457818160028110611da057611da061595a565b608002016000016020810190611db691906159a1565b6001600160801b0316828260028110611dd157611dd161595a565b608002016020016020810190611de791906159a1565b6001600160801b03161015611e28576040517f5cef583a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611e6f828260028110611e3d57611e3d61595a565b608002016040016020810190611e539190615ac5565b67ffffffffffffffff166601000000000000908190041c151590565b611ea5576040517f6a43f8d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ed0828260028110611eba57611eba61595a565b608002016060016020810190611e539190615ac5565b611f06576040517f6a43f8d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600101611d85565b60008681526066602052604080822081516060810192839052909291839060039082845b815481526020019060010190808311611f325750505050509050600080611f5883613419565b604080518082019091529193509150611fa8908a60026000835b82821015611f9e57611f8f60808302850136819003810190615af6565b81526020019060010190611f72565b5050505083613998565b611fde576040517f811cb74a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915260009061202b908a600284835b828210156120215761201260808302850136819003810190615af6565b81526020019060010190611ff5565b5050505083613680565b805185519192501461203c57805185555b602080820151908501511461205657602081015160018601555b604080820151908501511461207057604081015160028601555b600061207c8984613af7565b905060005b60028110156122be57600082826002811061209e5761209e61595a565b602002015190508582600281106120b7576120b761595a565b6020020151516001600160801b03168c83600281106120d8576120d861595a565b6080020160000160208101906120ee91906159a1565b6001600160801b031610156121655760008c83600281106121115761211161595a565b60800201600001602081019061212791906159a1565b8784600281106121395761213961595a565b6020020151516121499190615a7a565b905061215f828c836001600160801b031661394d565b50612224565b8582600281106121775761217761595a565b6020020151516001600160801b03168c83600281106121985761219861595a565b6080020160000160208101906121ae91906159a1565b6001600160801b031611156122245760008683600281106121d1576121d161595a565b6020020151518d84600281106121e9576121e961595a565b6080020160000160208101906121ff91906159a1565b6122099190615a7a565b9050612222828c836001600160801b03168d6001613825565b505b6000891180156122415750612241816001600160a01b031661161a565b801561229d575085826002811061225a5761225a61595a565b6020020151516001600160801b03168c836002811061227b5761227b61595a565b60800201600001602081019061229191906159a1565b6001600160801b031611155b156122b5576122b56001600160a01b038b168a613b7a565b50600101612081565b50602081015181516040516001600160a01b0392831692909116908e907f720da23a5c920b1d8827ec83c4d3c4d90d9419eadb0036b88cb4c2ffa91aef7d90612310908f906080820190600090615be0565b60405180910390a4505050505050505050505050565b8161233081612ad5565b8161233a81612ad5565b6001600160a01b038085169084160361237f576040517fbd969eb000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b604080518082019091526000808252602082015260006123ba8760200151856020015160006002811061170e5761170e61595a565b905060005b858110156124f95760008787838181106123db576123db61595a565b90506040020160200160208101906123f391906159a1565b905060008888848181106124095761240961595a565b60409081029290920135600081815260666020528381208451606081019586905292955090939192509060039082845b815481526020019060010190808311612439575050505050905060008061245f83613419565b915091506124728a60000151858761350d565b60008115158815151461248657825161248c565b60208301515b905060008061249c83898e6135a4565b91509150818b6000018181516124b291906159bc565b6001600160801b031690525060208b0180518291906124d29083906159bc565b6001600160801b03169052506124f297508896506137ae95505050505050565b90506123bf565b50821561251e578151845161250e91906137b4565b6001600160801b0316825261253f565b612530826020015185600001516137eb565b6001600160801b031660208301525b5095945050505050565b610c3b8133613c93565b61255d8282613d08565b600082815260fb60205260409020610ad09082613daa565b80516001600160801b03166000908152606760205260408120610e3c81612eb5565b6125a18282613dbf565b600082815260fb60205260409020610ad09082613e42565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff16610c0457604051634ca8886760e01b815260040160405180910390fd5b612604613e57565b610191805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b620f424063ffffffff82161115610c3b576040517f58d620b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81516001600160801b031660009081526069602052604090205463ffffffff90811690821681036126c257505050565b82516001600160801b03166000908152606960209081526040822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff861617905580850151908101516001600160a01b03169160200201516001600160a01b03167f831434d05f3ad5f63be733ea463b2933c70d2162697fd200a22b5d56f5c454b6838560405161276e92919063ffffffff92831681529116602082015260400190565b60405180910390a3505050565b60655463ffffffff700100000000000000000000000000000000909104811690821681036127a7575050565b606580547fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000063ffffffff8581169182029290921790925560408051918416825260208201929092527f66db0986e1156e2e747795714bf0301c7e1c695c149a738cb01bcf5cfead8465910160405180910390a15050565b600054610100900460ff1661289c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b6128a4613eaa565b6128ac613f1d565b6128b4613f90565b6128bc61400b565b6128c461407e565b6115236140f1565b6128d46114cf565b610191805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126323390565b6000612917848484612c52565b80516040517f42966c680000000000000000000000000000000000000000000000000000000081529192506001600160a01b038516916342966c68916129639160040190815260200190565b600060405180830381600087803b15801561297d57600080fd5b505af1158015612991573d6000803e3d6000fd5b5050825160009081526066602052604081208181556001810182905560020155506129b99050565b805182516001600160801b031660009081526067602052604090206129dd916141f0565b5060408101515160208201516060830151612a0b92919060005b6020020151516001600160801b031661394d565b6040810151602090810151908201516060830151612a2c92919060016129f7565b604081015160208101516001600160a01b031690600060200201516001600160a01b031682602001516001600160a01b03167f4d5b6e0627ea711d8e9312b6ba56f50e0b51d41816fd6fd38643495ac81d38b684600001518560600151600060028110612a9b57612a9b61595a565b6020020151606087015160016020020151604051612abb93929190615bfc565b60405180910390a450505050565b6000610e3c83836141fc565b6001600160a01b038116610c3b576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600003610c3b576040517f7c946ed700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216600090815260686020526040812054808203612b79576000915050610b27565b80851115612b85578094505b612b8f8582615c93565b6001600160a01b038516600090815260686020526040902055612bb384848761394d565b6040516001600160a01b0387811682528691818616918716907f2f4e8fcae66f01952d258445c03f43cf56d3ce389e017ecd2afa8a79e77175889060200160405180910390a45092949350505050565b6001600160801b03811660009081526069602052604081205463ffffffff168015612c2e5780610e3c565b5050606554700100000000000000000000000000000000900463ffffffff16919050565b612c5a6151f6565b6040516331a9108f60e11b8152600481018590526000906001600160a01b03851690636352211e90602401602060405180830381865afa158015612ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc6919061593d565b600086815260666020526040808220815160608101928390529394509192919060039082845b815481526020019060010190808311612cec5750505050509050600080612d1283613419565b915091506000612d228783613af7565b604080516080810182528b81526001600160a01b039097166020880152860152505060608301525090509392505050565b612d5b6151ce565b612d658383612ebf565b15612d9c576040517fc9bb25eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612da884846133b3565b603354909150600090612dc5906001600160801b031660016159bc565b603380546fffffffffffffffffffffffffffffffff19166001600160801b0383169081179091556000908152603560205260409020909150612e0990836002615222565b5081516001600160a01b039081166000908152603460209081526040808320828701805186168552925280832080546fffffffffffffffffffffffffffffffff19166001600160801b0387169081179091559151865191519085169491909116927f6365c594f5448f79c1cc1e6f661bdbf1d16f2e8f85747e13f8e80f1fd168b7c391a46040518060400160405280826001600160801b03168152602001838152509250505092915050565b6000610841825490565b600080612ecc84846133b3565b80516001600160a01b039081166000908152603460209081526040808320828601519094168352929052908120549192506001600160801b039091169003612f18576000915050610841565b5060019392505050565b8451600090612f56908487845b608002016000016020810190612f4591906159a1565b6001600160801b0316856001613825565b6020860151612f689084876001612f2f565b606554600090612f82906001600160801b031660016159bc565b606580546001600160801b0383166fffffffffffffffffffffffffffffffff199182168117909255875192935060009260801b161786516001600160801b03166000908152606760205260409020909150612fdd9082614226565b5087516020870151600091612ff391600161170e565b60408051808201909152909150613041908960026000835b828210156130375761302860808302850136819003810190615af6565b8152602001906001019061300b565b5050505082613680565b600083815260666020526040902061305a91600361528e565b506040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152602482018490528b16906340c10f1990604401600060405180830381600087803b1580156130be57600080fd5b505af11580156130d2573d6000803e3d6000fd5b50505050886001600281106130e9576130e961595a565b602002015189516040516001600160a01b0392831692918216918916907fff24554f8ccfe540435cfc8854831f8dcf1cf2068708cfaf46e8b52a4ccc4c8d9061313a9087908e906080820190615ca6565b60405180910390a45098975050505050505050565b83516001600160801b0316600090815260676020526040812060609161317482612eb5565b905084158061318257508085115b1561318b578094505b848611156131c5576040517f2cd4dad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006131d18787615c93565b905060008167ffffffffffffffff8111156131ee576131ee615ae0565b60405190808252806020026020018201604052801561322757816020015b6132146151f6565b81526020019060019003908161320c5790505b50905060005b8281101561328757600061324b613244838c615a9a565b8790612ac9565b905061325881898d612c52565b83838151811061326a5761326a61595a565b6020026020010181905250506132808160010190565b905061322d565b5098975050505050505050565b6033546060906001600160801b031660008167ffffffffffffffff8111156132be576132be615ae0565b6040519080825280602002602001820160405280156132f757816020015b6132e46152bc565b8152602001906001900390816132dc5790505b50905060005b826001600160801b0316816001600160801b031610156133ac57603560006133268360016159bc565b6001600160801b03168152602081019190915260409081016000208151808301928390529160029082845b81546001600160a01b0316815260019091019060200180831161335157505050505082826001600160801b03168151811061338e5761338e61595a565b602002602001018190525080806133a490615cc8565b9150506132fd565b5092915050565b6133bb6152bc565b816001600160a01b0316836001600160a01b0316106133f757604080518082019091526001600160a01b03808416825284166020820152610e3c565b50604080518082019091526001600160a01b0392831681529116602082015290565b6134216152da565b6040805160c0808201835284516001600160801b0390811683850190815260208088018051841660608701528051608090811c67ffffffffffffffff1681880152905190941c60a0860152908452845180840186528751841c8152878601519092168282015260009490840192908201908760026020020151901c67ffffffffffffffff16815260200160c16001886002600381106134c2576134c261595a565b6020020151901b901c67ffffffffffffffff169052905291507f8000000000000000000000000000000000000000000000000000000000000000836002602002015110159050915091565b826001600160801b03166135218360801c90565b6001600160801b031614613561576040517fb7b067f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600160801b0316600003610ad0576040517feb1a139600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600085600001516001600160801b03169050600086602001516001600160801b0316905060006135f7886040015167ffffffffffffffff1665ffffffffffff811666010000000000009091041b90565b90506000613625896060015167ffffffffffffffff1665ffffffffffff811666010000000000009091041b90565b905086156136555761364b613646896001600160801b031686868686614232565b614331565b9550879450613674565b879550613671613646896001600160801b0316868686866143b4565b94505b50505050935093915050565b613688615320565b604080516060808201835260208681015151875151608091821b6fffffffffffffffffffffffffffffffff19166001600160801b03918216178552885193840151848701519484015160c09190911b7fffffffffffffffff000000000000000000000000000000000000000000000000169490921b77ffffffffffffffff0000000000000000000000000000000016911617919091179082015290810183613731576000613753565b7f80000000000000000000000000000000000000000000000000000000000000005b60c086600160200201516060015167ffffffffffffffff16901b608087600160200201516040015167ffffffffffffffff16901b60008860016020020151602001516001600160801b0316901b171717815250905092915050565b60010190565b6000806137c083612c03565b9050610b276136466001600160801b038616620f42406137e08582615cee565b63ffffffff1661449b565b6000806137f783612c03565b9050610b276136466001600160801b03861661381684620f4240615cee565b63ffffffff16620f4240614503565b613837856001600160a01b031661161a565b156138a05782821015613876576040517f677606af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282111561389b5761389b61388b8484615c93565b6001600160a01b03861690613b7a565b610c8a565b8215610c8a5780156139385760006138c16001600160a01b038716306145f7565b90506138d86001600160a01b03871686308761469e565b60006138ed6001600160a01b038816306145f7565b9050846138fa8383615c93565b14613931576040517fca3e0a6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050610c8a565b610c8a6001600160a01b03861685308661469e565b8060000361395a57505050565b61396c836001600160a01b031661161a565b1561398457610ad06001600160a01b03831682613b7a565b610ad06001600160a01b03841683836146c8565b6000805b6002811015612f18578281600281106139b7576139b761595a565b6020020151516001600160801b03168482600281106139d8576139d861595a565b6020020151516001600160801b0316141580613a3a5750828160028110613a0157613a0161595a565b6020020151602001516001600160801b0316848260028110613a2557613a2561595a565b6020020151602001516001600160801b031614155b80613a8d5750828160028110613a5257613a5261595a565b60200201516040015167ffffffffffffffff16848260028110613a7757613a7761595a565b60200201516040015167ffffffffffffffff1614155b80613ae05750828160028110613aa557613aa561595a565b60200201516060015167ffffffffffffffff16848260028110613aca57613aca61595a565b60200201516060015167ffffffffffffffff1614155b15613aef576000915050610841565b60010161399c565b613aff6152bc565b81613b0e578260200151610e3c565b60405180604001604052808460200151600160028110613b3057613b3061595a565b60200201516001600160a01b03166001600160a01b031681526020018460200151600060028110613b6357613b6361595a565b60200201516001600160a01b031690529392505050565b80471015613bca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610bf1565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613c17576040519150601f19603f3d011682016040523d82523d6000602084013e613c1c565b606091505b5050905080610ad05760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610bf1565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff16610c0457613cc68161472d565b613cd183602061473f565b604051602001613ce2929190615d45565b60408051601f198184030181529082905262461bcd60e51b8252610bf191600401615dc6565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff16610c0457600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613d663390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610e3c836001600160a01b038416614968565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff1615610c0457600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610e3c836001600160a01b0384166149b7565b6101915460ff166115235760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610bf1565b600054610100900460ff16613f155760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b611523614aaa565b600054610100900460ff16613f885760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b611523614b15565b600054610100900460ff16613ffb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b614003614aaa565b611523614b8b565b600054610100900460ff166140765760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b611523614c59565b600054610100900460ff166140e95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b611523614cc4565b600054610100900460ff1661415c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b6141a67ff28f409b8cbe6b50c7ca45afe893f01f69626f8a4e33cb480bc1bc2d618c08457f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096614d3c565b6115237f24a843cae781765d8cdc3bca1cc42497522c0508f4e621c2ca36ceea2fda7b167f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096614d3c565b6000610e3c83836149b7565b60008260000182815481106142135761421361595a565b9060005260206000200154905092915050565b6000610e3c8383614968565b6000826000036142a15781600003614276576040517f4e305c4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61429a8661428b660100000000000080615df9565b6142958580615df9565b61449b565b9050614328565b660100000000000084028584028386020160006142be868a615df9565b6142c89083615c93565b905060006142d68485614d87565b905060006142e48484614d87565b905060006142f28383614db6565b9050600061430187888461449b565b90506000614310878785614503565b905061431d8e838361449b565b985050505050505050505b95945050505050565b60006001600160801b038211156143b05760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610bf1565b5090565b60008260000361441c57816000036143f8576040517f4e305c4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61429a866144068480615df9565b614417660100000000000080615df9565b614503565b660100000000000084028584028386020160006144398983615df9565b905060006144478485614d87565b905060006144558389614d87565b905060006144638383614db6565b9050600061447287888461449b565b90506000614481868c8561449b565b905061431d876144918589615e10565b6144178486615a9a565b6000806144a9858585614503565b905060006144b8868686614dcc565b1115610b275760001981106144f9576040517f35278d1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001019050610e3c565b60008060006145128686614de7565b91509150816000036145375783818161452d5761452d615d0b565b0492505050610e3c565b838210614570576040517f35278d1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061457d878787614dcc565b905060008061458d858585614e22565b91509150816000036145b5578681816145a8576145a8615d0b565b0495505050505050610e3c565b60008781038816906145c8848484614e52565b905060006145e4838b816145de576145de615d0b565b04614e8f565b919091029b9a5050505050505050505050565b60006146028361161a565b1561461857506001600160a01b03811631610841565b826040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906370a0823190602401602060405180830381865afa15801561467a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c9190615e32565b8015806146af57506146af8461161a565b61237f5761237f6001600160a01b038516848484614eb0565b806000036146d557505050565b6146de8361161a565b15614719576040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561237f573d6000803e3d6000fd5b610ad06001600160a01b0384168383614f61565b60606108416001600160a01b03831660145b6060600061474e836002615df9565b614759906002615a9a565b67ffffffffffffffff81111561477157614771615ae0565b6040519080825280601f01601f19166020018201604052801561479b576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106147d2576147d261595a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106148355761483561595a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000614871846002615df9565b61487c906001615a9a565b90505b6001811115614919577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106148bd576148bd61595a565b1a60f81b8282815181106148d3576148d361595a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361491281615e4b565b905061487f565b508315610e3c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610bf1565b60008181526001830160205260408120546149af57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610841565b506000610841565b60008181526001830160205260408120548015614aa05760006149db600183615c93565b85549091506000906149ef90600190615c93565b9050818114614a54576000866000018281548110614a0f57614a0f61595a565b9060005260206000200154905080876000018481548110614a3257614a3261595a565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614a6557614a65615e62565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610841565b6000915050610841565b600054610100900460ff166115235760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b600054610100900460ff16614b805760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b6115236107d061277b565b600054610100900460ff16614bf65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b61012d805461ffff19166001179055614c2f7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509680614d3c565b6115237f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633614faa565b600054610100900460ff16611ca25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b600054610100900460ff16614d2f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bf1565b610191805460ff19169055565b600082815260c96020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000806000614d968585614de7565b9150915080198211614dab5781600101614328565b506002019392505050565b6000818311614dc55781610e3c565b5090919050565b60008180614ddc57614ddc615d0b565b838509949350505050565b6000806000614df68585614fb4565b9050848402808210614e0f579081900392509050614e1b565b60018183030393509150505b9250929050565b600080828410614e385750839050818303614e4a565b614e43600186615c93565b9150508183035b935093915050565b600080614e708380830381614e6957614e69615d0b565b0460010190565b9050828481614e8157614e81615d0b565b048186021795945050505050565b60006001815b60088110156133ac5783820260020382029150600101614e95565b6040516001600160a01b038085166024830152831660448201526064810182905261237f9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614fc3565b6040516001600160a01b038316602482015260448101829052610ad09084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401614efd565b610c048282612553565b60006000198284099392505050565b6000615018826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150ab9092919063ffffffff16565b90508051600014806150395750808060200190518101906150399190615e78565b610ad05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610bf1565b6060610b27848460008585600080866001600160a01b031685876040516150d29190615e9a565b60006040518083038185875af1925050503d806000811461510f576040519150601f19603f3d011682016040523d82523d6000602084013e615114565b606091505b509150915061512587838387615130565b979650505050505050565b6060831561519f578251600003615198576001600160a01b0385163b6151985760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bf1565b5081610b27565b610b2783838151156151b45781518083602001fd5b8060405162461bcd60e51b8152600401610bf19190615dc6565b604051806040016040528060006001600160801b031681526020016151f16152bc565b905290565b60408051608081018252600080825260208201529081016152156152bc565b81526020016151f16152da565b8260028101928215615282579160200282015b8281111561528257825182547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178255602090920191600190910190615235565b506143b092915061533e565b8260038101928215615282579160200282015b828111156152825782518255916020019190600101906152a1565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816152e95790505090565b60405180606001604052806003906020820280368337509192915050565b5b808211156143b0576000815560010161533f565b60006020828403121561536557600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610e3c57600080fd5b6001600160a01b0381168114610c3b57600080fd5b60008083601f8401126153bc57600080fd5b50813567ffffffffffffffff8111156153d457600080fd5b6020830191508360208260061b8501011115614e1b57600080fd5b80356001600160801b038116811461540657600080fd5b919050565b60008060008060008060a0878903121561542457600080fd5b863561542f81615395565b9550602087013561543f81615395565b9450604087013567ffffffffffffffff81111561545b57600080fd5b61546789828a016153aa565b90955093505060608701359150615480608088016153ef565b90509295509295509295565b80610100810183101561084157600080fd5b600080600061022084860312156154b457600080fd5b833592506154c5856020860161548c565b91506154d585610120860161548c565b90509250925092565b6000602082840312156154f057600080fd5b5035919050565b6000806000806060858703121561550d57600080fd5b843561551881615395565b9350602085013561552881615395565b9250604085013567ffffffffffffffff81111561554457600080fd5b615550878288016153aa565b95989497509550505050565b6000806040838503121561556f57600080fd5b82359150602083013561558181615395565b809150509250929050565b6000806040838503121561559f57600080fd5b82356155aa81615395565b9150602083013561558181615395565b803563ffffffff8116811461540657600080fd5b6000806000606084860312156155e357600080fd5b83356155ee81615395565b925060208401356155fe81615395565b91506154d5604085016155ba565b60006020828403121561561e57600080fd5b610e3c826155ba565b8060005b600281101561237f5781516001600160a01b031684526020938401939091019060010161562b565b81516001600160801b0316815260208083015160608301916133ac90840182615627565b6000806020838503121561568a57600080fd5b823567ffffffffffffffff808211156156a257600080fd5b818501915085601f8301126156b657600080fd5b8135818111156156c557600080fd5b8660208285010111156156d757600080fd5b60209290920196919550909350505050565b600080604083850312156156fc57600080fd5b50508035926020909101359150565b60008060006060848603121561572057600080fd5b833561572b81615395565b925060208401359150604084013561574281615395565b809150509250925092565b8051825260206001600160a01b0381830151168184015260408201516157766040850182615627565b506060820151608080850160005b60028110156157e6576157d68285516001600160801b0380825116835280602083015116602084015250604081015167ffffffffffffffff808216604085015280606084015116606085015250505050565b9284019290820190600101615784565b50505050505050565b6101808101610841828461574d565b6000806000610140848603121561581457600080fd5b833561581f81615395565b9250602084013561582f81615395565b91506154d5856040860161548c565b6000806000806080858703121561585457600080fd5b843561585f81615395565b9350602085013561586f81615395565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b818110156158c7576158b383855161574d565b9284019261018092909201916001016158a0565b50909695505050505050565b6000602082840312156158e557600080fd5b8135610e3c81615395565b602080825282518282018190526000919060409081850190868401855b8281101561593057615920848351615627565b928401929085019060010161590d565b5091979650505050505050565b60006020828403121561594f57600080fd5b8151610e3c81615395565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b61ffff8181168382160190808211156133ac576133ac615970565b6000602082840312156159b357600080fd5b610e3c826153ef565b6001600160801b038181168382160190808211156133ac576133ac615970565b6101208101615a2982866001600160801b0380825116835280602083015116602084015250604081015167ffffffffffffffff808216604085015280606084015116606085015250505050565b83516001600160801b03908116608084015260208501511660a0830152604084015167ffffffffffffffff90811660c084015260608501511660e08301525b60ff8316610100830152949350505050565b6001600160801b038281168282160390808211156133ac576133ac615970565b8082018082111561084157610841615970565b803567ffffffffffffffff8116811461540657600080fd5b600060208284031215615ad757600080fd5b610e3c82615aad565b634e487b7160e01b600052604160045260246000fd5b600060808284031215615b0857600080fd5b6040516080810181811067ffffffffffffffff82111715615b3957634e487b7160e01b600052604160045260246000fd5b604052615b45836153ef565b8152615b53602084016153ef565b6020820152615b6460408401615aad565b6040820152615b7560608401615aad565b60608201529392505050565b6001600160801b0380615b93836153ef565b16835280615ba3602084016153ef565b16602084015250615bb660408201615aad565b67ffffffffffffffff808216604085015280615bd460608501615aad565b16606085015250505050565b6101208101615bef8286615b81565b615a686080830185615b81565b8381526101208101615c4f60208301856001600160801b0380825116835280602083015116602084015250604081015167ffffffffffffffff808216604085015280606084015116606085015250505050565b82516001600160801b0390811660a084015260208401511660c0830152604083015167ffffffffffffffff90811660e0840152606084015116610100830152610b27565b8181038181111561084157610841615970565b8381526101208101615cbb6020830185615b81565b610b2760a0830184615b81565b60006001600160801b03808316818103615ce457615ce4615970565b6001019392505050565b63ffffffff8281168282160390808211156133ac576133ac615970565b634e487b7160e01b600052601260045260246000fd5b60005b83811015615d3c578181015183820152602001615d24565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615d7d816017850160208801615d21565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615dba816028840160208801615d21565b01602801949350505050565b6020815260008251806020840152615de5816040850160208701615d21565b601f01601f19169190910160400192915050565b808202811582820484141761084157610841615970565b600082615e2d57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615e4457600080fd5b5051919050565b600081615e5a57615e5a615970565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215615e8a57600080fd5b81518015158114610e3c57600080fd5b60008251615eac818460208701615d21565b919091019291505056fea164736f6c6343000813000a",
  "devdoc": {
    "details": "Carbon Controller contract",
    "events": {
      "FeesWithdrawn(address,address,uint256,address)": {
        "details": "triggered when fees are withdrawn"
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "PairCreated(uint128,address,address)": {
        "details": "triggered when a new pair is created"
      },
      "PairTradingFeePPMUpdated(address,address,uint32,uint32)": {
        "details": "triggered when the custom trading fee for a given pair is updated"
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "StrategyCreated(uint256,address,address,address,(uint128,uint128,uint64,uint64),(uint128,uint128,uint64,uint64))": {
        "details": "triggered when a strategy is created"
      },
      "StrategyDeleted(uint256,address,address,address,(uint128,uint128,uint64,uint64),(uint128,uint128,uint64,uint64))": {
        "details": "triggered when a strategy is deleted"
      },
      "StrategyUpdated(uint256,address,address,(uint128,uint128,uint64,uint64),(uint128,uint128,uint64,uint64),uint8)": {
        "details": "triggered when a strategy is updated"
      },
      "TokensTraded(address,address,address,uint256,uint256,uint128,bool)": {
        "details": "triggered when tokens are traded"
      },
      "TradingFeePPMUpdated(uint32,uint32)": {
        "details": "triggered when the network fee is updated"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "accumulatedFees(address)": {
        "details": "returns the amount of fees accumulated for the specified token"
      },
      "calculateTradeSourceAmount(address,address,(uint256,uint128)[])": {
        "details": "returns the source amount required when trading by target amount"
      },
      "calculateTradeTargetAmount(address,address,(uint256,uint128)[])": {
        "details": "returns the target amount expected when trading by source amount"
      },
      "constructor": {
        "details": "used to set immutable state variables and initialize the implementation"
      },
      "controllerType()": {
        "details": "returns the type of the controller"
      },
      "createPair(address,address)": {
        "details": "creates a new pair of provided token0 and token1"
      },
      "createStrategy(address,address,(uint128,uint128,uint64,uint64)[2])": {
        "details": "creates a new strategy, returns the strategy's id requirements: - the caller must have approved the tokens with assigned liquidity in the order, if any"
      },
      "deleteStrategy(uint256)": {
        "details": "deletes a strategy matching the provided id notes: - 100% of liquidity is withdrawn and sent to the owner requirements: - the caller must be the owner of the NFT voucher"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize()": {
        "details": "fully initializes the contract and its parents"
      },
      "pair(address,address)": {
        "details": "returns a pair's metadata matching the provided token0 and token1"
      },
      "pairTradingFeePPM(address,address)": {
        "details": "returns the trading fee for a given pair (in units of PPM)"
      },
      "pairs()": {
        "details": "returns a list of all supported pairs"
      },
      "pause()": {
        "details": "pauses the CarbonController requirements: - the caller must have the ROLE_EMERGENCY_STOPPER privilege"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "postUpgrade(bytes)": {
        "details": "performs post-upgrade initialization requirements: - this must and can be called only once per-upgrade"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "roleAdmin()": {
        "details": "returns the admin role"
      },
      "roleEmergencyStopper()": {
        "details": "returns the emergency stopper role"
      },
      "roleFeesManager()": {
        "details": "returns the fees manager role"
      },
      "setPairTradingFeePPM(address,address,uint32)": {
        "details": "sets the custom trading fee for a given pair (in units of PPM) requirements: - the caller must be the admin of the contract"
      },
      "setTradingFeePPM(uint32)": {
        "details": "sets the trading fee (in units of PPM) requirements: - the caller must be the admin of the contract"
      },
      "strategiesByPair(address,address,uint256,uint256)": {
        "details": "returns strategies belonging to a specific pair note that for the full list of strategies pass 0 to both startIndex and endIndex"
      },
      "strategiesByPairCount(address,address)": {
        "details": "returns the count of strategies belonging to a specific pair"
      },
      "strategy(uint256)": {
        "details": "returns a strategy matching the provided id, note tokens and orders are returned sorted as provided upon creation"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tradeBySourceAmount(address,address,(uint256,uint128)[],uint256,uint128)": {
        "details": "performs a trade by specifying a fixed source amount notes: - excess native token is returned to the sender if any requirements: - the caller must have approved the source token"
      },
      "tradeByTargetAmount(address,address,(uint256,uint128)[],uint256,uint128)": {
        "details": "performs a trade by specifying a fixed target amount notes: - excess native token is returned to the sender if any requirements: - the caller must have approved the source token"
      },
      "tradingFeePPM()": {
        "details": "returns the trading fee (in units of PPM)"
      },
      "unpause()": {
        "details": "resumes the CarbonController requirements: - the caller must have the ROLE_EMERGENCY_STOPPER privilege"
      },
      "updateStrategy(uint256,(uint128,uint128,uint64,uint64)[2],(uint128,uint128,uint64,uint64)[2])": {
        "details": "updates an existing strategy notes: - currentOrders should reflect the orders values at the time of sending the tx this prevents cases in which the strategy was updated due to a trade between the time the transaction was sent and the time it was mined, thus, giving more control to the strategy owner. - reduced liquidity is refunded to the owner - increased liquidity is deposited - excess native token is returned to the sender if any - the sorting of orders is expected to equal the sorting upon creation requirements: - the caller must have approved the tokens with increased liquidity, if any"
      },
      "withdrawFees(address,uint256,address)": {
        "details": "transfers the accumulated fees to the specified recipient notes: `amount` is capped to the available amount returns the amount withdrawn"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 588,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 591,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2445,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12406,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_lastPairId",
        "offset": 0,
        "slot": "51",
        "type": "t_uint128"
      },
      {
        "astId": 12414,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_pairIds",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_userDefinedValueType(Token)16997,t_mapping(t_userDefinedValueType(Token)16997,t_uint128))"
      },
      {
        "astId": 12421,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_pairsStorage",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_uint128,t_array(t_userDefinedValueType(Token)16997)2_storage)"
      },
      {
        "astId": 12427,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "__gap",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 12898,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_strategyCounter",
        "offset": 0,
        "slot": "101",
        "type": "t_uint128"
      },
      {
        "astId": 12900,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_tradingFeePPM",
        "offset": 16,
        "slot": "101",
        "type": "t_uint32"
      },
      {
        "astId": 12906,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_packedOrdersByStrategyId",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_array(t_uint256)3_storage)"
      },
      {
        "astId": 12911,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_strategyIdsByPairIdStorage",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint128,t_struct(UintSet)5726_storage)"
      },
      {
        "astId": 12916,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_accumulatedFees",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_userDefinedValueType(Token)16997,t_uint256)"
      },
      {
        "astId": 12920,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_customTradingFeePPM",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint128,t_uint32)"
      },
      {
        "astId": 12926,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 2718,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)5569_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17877,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_initializations",
        "offset": 0,
        "slot": "301",
        "type": "t_uint16"
      },
      {
        "astId": 17883,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 891,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_status",
        "offset": 0,
        "slot": "351",
        "type": "t_uint256"
      },
      {
        "astId": 960,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 771,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "_paused",
        "offset": 0,
        "slot": "401",
        "type": "t_bool"
      },
      {
        "astId": 876,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "__gap",
        "offset": 0,
        "slot": "402",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11368,
        "contract": "contracts/carbon/CarbonController.sol:CarbonController",
        "label": "__gap",
        "offset": 0,
        "slot": "451",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_userDefinedValueType(Token)16997)2_storage": {
        "base": "t_userDefinedValueType(Token)16997",
        "encoding": "inplace",
        "label": "Token[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)5569_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5569_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint128,t_array(t_userDefinedValueType(Token)16997)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => Token[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_userDefinedValueType(Token)16997)2_storage"
      },
      "t_mapping(t_uint128,t_struct(UintSet)5726_storage)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => struct EnumerableSetUpgradeable.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)5726_storage"
      },
      "t_mapping(t_uint128,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint256,t_array(t_uint256)3_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)3_storage"
      },
      "t_mapping(t_userDefinedValueType(Token)16997,t_mapping(t_userDefinedValueType(Token)16997,t_uint128))": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(Token)16997",
        "label": "mapping(Token => mapping(Token => uint128))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_userDefinedValueType(Token)16997,t_uint128)"
      },
      "t_mapping(t_userDefinedValueType(Token)16997,t_uint128)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(Token)16997",
        "label": "mapping(Token => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_userDefinedValueType(Token)16997,t_uint256)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(Token)16997",
        "label": "mapping(Token => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5569_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 5568,
            "contract": "contracts/carbon/CarbonController.sol:CarbonController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5254_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/carbon/CarbonController.sol:CarbonController",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/carbon/CarbonController.sol:CarbonController",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5254_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 5249,
            "contract": "contracts/carbon/CarbonController.sol:CarbonController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5253,
            "contract": "contracts/carbon/CarbonController.sol:CarbonController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)5726_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 5725,
            "contract": "contracts/carbon/CarbonController.sol:CarbonController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5254_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(Token)16997": {
        "encoding": "inplace",
        "label": "Token",
        "numberOfBytes": "20"
      }
    }
  }
}
